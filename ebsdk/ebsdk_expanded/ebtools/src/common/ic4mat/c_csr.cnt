// $Id: c_csr.cnt,v 1.1.1.1 1998/12/29 21:36:22 paradis Exp $
//
// $Log: c_csr.cnt,v $
// Revision 1.1.1.1  1998/12/29 21:36:22  paradis
// Initial CVS checkin
//
# Revision 1.1  1997/11/12  18:51:39  pbell
# Initial revision
#
// 
///////////////////////////////////////////////////////////////
// Revision 1.62  1997/04/29  15:15:00  razdan
// update csr name but do not change order..
//
// Revision 1.61  1997/04/22  23:12:04  razdan
// add new csr (unconnected for now) which enables probe data checking (PASS2)
//
// Revision 1.60  1997/03/12  22:23:49  jeisenbe
// Added delay flop to write-many chain to match schematics
//
// Revision 1.59  1997/03/01  14:29:07  razdan
// fix comment.
//
// Revision 1.58  1997/02/20  20:41:15  razdan
// name some duplicated signals for chango
//
// Revision 1.57  1997/02/18  22:11:31  quinn
// changes to support the Tbox adding 16 to it's Cbox data shift count
//
// Revision 1.56  1997/02/14  20:39:29  jeisenbe
// Add CSR chain delay flops to match schematics
//
// Revision 1.55  1997/02/03  15:23:16  quinn
// new Cbox pads
//
// Revision 1.54  1997/01/27  23:44:00  razdan
// add mbox_bc_prb_stall_a csr to fix MBOX probe/bcfill requirement
//
// Revision 1.53  1997/01/23  21:36:15  razdan
// add "fake" csr to aid verification testing
//
// Revision 1.52  1997/01/13  20:35:15  quinn
// added c_mtv_cfg->write_many_a for regression tests which
// need to init the WRITE_MANY chain before reset
//
// Revision 1.51  1996/12/20  13:56:18  razdan
// match schematics
//
// Revision 1.50  1996/12/09  20:43:40  razdan
// fixup deposit/force
//
// Revision 1.49  1996/11/25  13:49:19  quinn
// more Cbox csr changes
//
// Revision 1.48  1996/11/07  20:11:29  razdan
// PASS2 bank_bit enable ..
//
// Revision 1.47  1996/11/06  20:58:37  quinn
// changes for expanded/re-arranged SROM icache fill line
//
// Revision 1.46  1996/11/06  15:12:17  quinn
// Cbox changes to support Cbox csr changes and new PLL/reset state machine
//
// Revision 1.45  1996/09/29  03:28:13  razdan
// add csr for pentium mode rams
//
// Revision 1.44  1996/09/23  18:53:38  asher
// Add data_valid_dly and jitter_cmd to the ipr write once chain.
//
// Revision 1.43  1996/09/16  22:50:53  razdan
// extend data_valid_dly_a
//
// Revision 1.41  1996/09/05  12:32:34  razdan
// fixup for new pads modle
//
// Revision 1.36  1996/07/09  21:26:05  quinn
// added c_reg_ipr->cbox_shiftdone_a_h and associated logic
//
// Revision 1.35  1996/07/06  01:20:53  razdan
//  update for debug_port
//
// Revision 1.34  1996/07/03  22:43:34  huggins
// added OR logic to prevent a illegal BCACHE size from being sent
// to the rest of the cbox
//
// Revision 1.33  1996/06/30  15:48:52  huggins
// added MTV config stuff
//
// Revision 1.31  1996/06/21  20:45:53  huggins
// resized write_many, added constants
//
// Revision 1.30  1996/06/13  00:15:32  razdan
// add shift register and fixup csrs
//
// Revision 1.29  1996/06/02  18:07:04  razdan
// add bcache wr->rd bubbles to handle NOP cycles in bcache
//
// Revision 1.28  1996/05/26  20:51:47  razdan
// minor changes for 8X mode.
//
// Revision 1.27  1996/03/29  10:58:31  razdan
// add clock forwarding csrs
//
// Revision 1.26  1996/03/24  12:23:15  razdan
// reencode the sys_bus_size field
//
// Revision 1.25  1996/03/22  04:46:39  razdan
// update fast mode table
//
// Revision 1.23  1996/03/04  00:43:39  razdan
// add enable_evict/prb_tag_only/bc_frm_clk csrs
//
// Revision 1.22  1996/02/29  01:07:29  razdan
// Add prb_tag_slot csr..
//
// Revision 1.21  1996/02/25  20:12:40  razdan
// add enable_stc_command ..
//
// Revision 1.20  1996/02/24  00:36:07  razdan
// prune csrs
//
// Revision 1.19  1996/01/18  13:45:36  razdan
// add data_frame_select_a and sysdc_delay_a parameters
//
// Revision 1.18  1995/12/11  22:42:49  razdan
// increase late-write number
//
// Revision 1.17  1995/12/03  23:29:32  razdan
// add early address csr
//
// Revision 1.16  1995/12/02  20:28:40  razdan
// cleanup csrs
//
// Revision 1.15  1995/11/16  15:55:37  razdan
// extend set_dirty_enable logic for cray
//
// Revision 1.14  1995/10/17  13:34:51  razdan
// Add Cray's istream enable mode bit
//
// Revision 1.13  1995/10/10  23:54:23  razdan
// add spec_read_enable_a
//
// Revision 1.12  1995/09/30  23:38:33  razdan
// take out pa4/no_io_wrap csrs
//
// Revision 1.11  1995/09/26  13:53:39  razdan
// added pa4_is_zero and io_no_wrap mode
//
// Revision 1.10  1995/09/15  21:24:25  razdan
// updated set-dirty/zeroblk enables
//
// Revision 1.9  1995/08/07  14:31:40  razdan
// remove unneeded csrs
//
// Revision 1.8  1995/06/20  15:30:18  razdan
// update the size of bc_rd_wr_bubbles by 2 bits
//
// Revision 1.7  1995/06/09  20:39:59  razdan
// Added new CSR for seperate System Clock
//
// Revision 1.6  1995/06/03  16:13:42  razdan
// Add system clock load vector csr
//
// Revision 1.5  1995/05/18  19:17:50  razdan
// Added shift register for Cbox Csrs
//
// Revision 1.4  1995/05/08  11:35:50  razdan
// Added CSRs related to wrapping
//
// Revision 1.3  1995/02/27  14:25:28  razdan
// Fix Comment problem.
//
// Revision 1.2  1995/02/27  13:53:53  razdan
// Added Log command for RCS
//
//
// File Name: c_csr.mdl
//
// Author:  Rahul Razdan
//
// This model file contains the signal definitions for CONTRL SYSTEM 
//	REGISTERS for the CBOX. 
// 
//
//
//

//	legacy signal names 


Container c_csr
{

 Signal sysbus_width;
 Signal bcache_select;
 Signal fetchblk_enable;


 Signal bc_burst_mode_enable;			/* is the Bcache burst mode 			*/
 Signal bc_clean_victim(0,0);  			/*  clean victim is being overwritten		*/	
 Signal bc_enable(0,0);	  			/*  there is a Bcache				*/
 Signal bc_rd_rd_bubbles(1,0);  		/*  If bank conflict, the rd to rd bubble  	*/
 Signal bc_rdclk_ld_vector(15,0);		/* vector loaded to emulate bcread clocks       */
 Signal sys_add_clk_ld_vector(15,0);		/* vector loaded to emulate bcread clocks       */
 Signal bc_rdvictim;				/* RDvictim commands 				*/
 Signal bc_size(4,1);	 	  		/*  1 Mbytes to 16 Mbytes.			*/
						/* stored as 
							1 Mb: 0000
							2 Mb: 0001
							4 Mb: 0011
							8 Mb: 0111
						       16 Mb: 1111
						*/



/****************		SYSTEM  CSRs  ******************************/

 Signal add_frame_select(2,0);			/* bit 0 - 1X, bit 1 - 2X , bit 2 - 4X		*/
 Signal frame_select(1,0);			/*  0   -  1X
						    1   -  2X
						    2   -  4X
						    3   -  8X
						*/

 Signal add_sys_sysclk_ratio(15,0); 		/* sysclock ratio from 1X-4X in 0.5 incs    	*/
 Signal sysclk_ratio(2,0); 			/* sysclock ratio from 1X-4X in 0.5 incs    	
								0   -->  1X       (not supported)
								1   -->  1.5X     
								2   -->  2.0X
								3   -->  2.5X
								4   -->  3.0X
								5   -->  3.5X
								6   -->  4.0X
						*/
 Signal bch_readclk_ratio(15,0);		/* sysclock ratio from 1X-4X in 0.5 incs    	*/
 Signal dcvic_threshold(7,0);	    		/* VAF threshold for bcvictims (decoded)        */
 Signal dup_tag_enable(0,0);	  		/*  External System has a Duplicate Tag 	
							Used for:  
								1. Steve Mode for Probes
						*/

 Signal bc_rd_wr_bubbles(5,0);  		/* number of bcache cycles between rd and wr. 0-63    */

 Signal set_dirty_enable(2,0);	  		/*  enable sending set dirtys to system		
						       SD SC  C
							0  0  0  |  don't send anything off chip    (workstations)
							0  0  1  |  send only clean->dirty off chip (makes no sense)
							0  1  0  |  send only shared->dirty off chip(cray mode)
						 	0  1  1  |  send clean,shared off chip      (usefull ??)
							1  0  0  |  send only sd->dirty off chip    (usefull ??)
							1  0  1  |  send only sd,c-> off chip       (usefull ??)
							1  1  0  |  send all shared blocks off chip (tsunami)
							1  1  1  |  send every-thing off chip       (wildfire)
						*/

 Signal enable_stc_command;			/*  tell System about store conditionals       */
 Signal sysbus_format;		  		/*  two choices for pa bus assignment.		
							0        |  Bank Interleave
							1        |  Page Mode
						*/
 Signal sysbus_mb_enable(0,0);  		/*  send MBs to pins					  */
 Signal sysbus_ack_limit(4,0);			/*  zero is inf, otherwize its the count        	  */
 Signal zeroblk_enable(1,0);	  		/*  enable sending zeroblks to system   	
							X 0      |  don't use zeroblks -->   (wildfire ??)
							0 1      |  use Zeroblks..do not send off chip (workstations)
							1 1      |  Zeroblk ...   send off chip (Tsunami)

						*/
 Signal bc_bank_enable; 	  		/*  bcache is in two banks and MSB selects 	*/
 Signal bc_late_write_num(2,0);	  		/* enable write data to be delayed for 
							0-7 Bcclk cycles late write RAMS        */

 Signal bc_cpu_late_write_num(1,0);  		/* enable lead of address wrt data by
							0-3 CPU cycles		   	        */

 Signal tlaser_stio_mode;			/*  32-byte limit for stores to io space */


 Signal  io_data_no_merge;			// keep around for huggins
 Signal  sysBus_vaf_reserve;			// keep around for huggins

};





// CBOX CSR registers.

Container c_reg_csr
{

 Signal   cbox_dbg_port_a(2,0);			/* debug port mux selects
							000 	-->  	c_sys_arb->sys_rdy_in_4_cycles_6a
									c_sys_arb->arb_prb_hit_a
									c_sys_arb->arb_spec_fill_a
									c_sys_arb->arb_maf_mem_a
									c_sys_arb->arb_for_wmb_a
									c_sys_arb->arb_for_mb_a

							001	--> 	c_sys_arb->sys_ack_ctr_almost_full_a
									c_sys_arb->mbox_empty_a
									c_sys_arb->active_wrio_6a
									c_sys_arb->inhibit_write_a
									c_sys_arb->inhibit_wrvictim_a
									c_sys_arb->is_rdvic_read_a

							010	-->	c_bcc_arb->dup_tag_arb_a
									c_bcc_arb->arb_bc_rddata_6a
									c_bcc_arb->arb_bc_rdtag_6a
									c_bcc_arb->dc_victim_6a
									c_bcc_arb->arb_dc_affinity_6a
									c_bcc_arb->active_bc_6a
	
							011	-->	c_bcc_arb->cannot_do_maf_flow_6a
									c_bcc_arb->cannot_do_prb_flow_6a
									c_bcc_arb->bc_tag_read_busy_6a
									c_bcc_arb->bc_read_busy_6a
									c_bcc_arb->rdvic_coming_6a
									c_bcc_arb->bc_write_busy_6a

							100	-->	c_isb_arb->dc_ext_0a
									c_isb_arb->dc_upd_0a
									c_isb_arb->arb_maf_cam_0a
									c_isb_arb->arb_maf_retire_0a
									c_isb_arb->any_trans_0a
									c_isb_arb->address_trans_0a

							111	-->
									c->sysdc_fill_cmd_n2a_h
									c_osb_ctl->load_cmd_a
									c_osb_ctl->load_fast_mode_a

*/
							
//	
 Signal   istream_enable_a;			// keep around for huggins



 Signal sys_clk_ratio_a(15,0);			/* sysclock ratio from 1X-8X in 0.5 incs    	*/
 Signal frame_select_dec_a(3,0);		/* decoded frame select */
 Signal frame_select_a(1,0);			/*  0   -  1X
						    1   -  2X
						    2   -  4X
						*/
 Signal cfr_frmclk_delay_a(1,0);		/*  number of frame clock cycles to delay clk_fwd reset (0-3) */
 Signal cfr_ev6clk_delay_a(2,0);		/*  number of ev6_clk cycles to delay clk_fwd reset (0-7) */
 Signal cfr_gclk_delay_a(2,0);			/*  number of gclk cycles to delay clk_fwd reset (0-7) */

 Signal sys_clk_delay_a(1,0);			/*  system clk delay(in phases)				*/
 Signal bc_clk_delay_a(1,0);			/*  bcache clk delay(in phases)				*/


 Signal sys_clk_ld_vector_a(15,0);		/*  Initial system clock waveform (see c_pads.mdl for patterns) */
 Signal sys_fdbk_en_a(7,0);			/*  Feedback tap to use for circular shift register generating sys clock */
 Signal sys_bphase_ld_vector_a(3,0);		/*  Initial pattern for b-phase extension logic for the sys clock (see c_pads.mdl for patterns) */
 Signal sys_frame_ld_vector_a(4,0);		/*  Initial pattern for generating framing clock for system transfers (see c_pads.mdl for
							patterns */
 Signal sys_cpu_clk_delay_a(1,0);  		/*  enable delay of address by 0-3 CPU cycles...always set to 0	*/

 Signal dup_tag_enable_a(0,0);	  		/*  External System has a Duplicate Tag -->  Steve Mode for Probes */

 Signal enable_evict_a;				/*  enable evicts to be sent off-chip  		*/
 Signal prb_tag_only_a;				/*  favor  tag reads over tag/data reads        */

 Signal set_dirty_enable_a(2,0);		/*  enable sending set dirtys to system		
						       SD SC  C
							0  0  0  |  don't send anything off chip    (workstations)
							0  0  1  |  send only clean->dirty off chip (makes no sense)
							0  1  0  |  send only shared->dirty off chip(cray mode)
						 	0  1  1  |  send clean,shared off chip      (usefull ??)
							1  0  0  |  send only sd->dirty off chip    (usefull ??)
							1  0  1  |  send only sd,c-> off chip       (usefull ??)
							1  1  0  |  send all shared blocks off chip (tsunami)
							1  1  1  |  send every-thing off chip       (wildfire)
						*/
				
 Signal zeroblk_enable_a(1,0);	  		/*  enable sending zeroblks to system   	
							X 0      |  don't use zeroblks -->   (wildfire ??)
							0 1      |  use Zeroblks..do not send off chip (workstations)
							1 1      |  Zeroblk ...   send off chip (Tsunami)
						*/
 Signal spec_read_enable_a;			/*  enable speculative reads			*/
 Signal mbox_bc_prb_stall_a;			/*  set for bcache 5X,6X,7X,8X clock rates      */

 Signal sysbus_format_a;	  		/*  four choices for pa bus assignment.		
							0        |  Bank Interleave
							1        |  Page Mode
						*/
 Signal sysbus_mb_enable_a(0,0);  		/*  send MBs to pins				*/
 Signal sysbus_ack_limit_a(4,0);		/*  zero is inf, otherwize its the count        */
 Signal sysbus_vic_limit_a(2,0);		/*  zero is inf, otherwize its the count of victims   */

 Signal tlaser_stio_mode_a;			/*  32-byte limit for stores to io space */



 Signal sysdc_delay_a(3,0);			/*  delay before looking at sysdc		*/
 Signal fast_mode_disable_a;			/* tells EV6 to disable FAST mode 	 	
						          1.5  2.0  2.5  3.0  3.5  4.0  5.0 6.0 7.0 8.0
						     1    ill   3    2    2    2    2    1   1   1   1
						     2     2    2    1    1    1    1    1   1   1   1
						     4     1    1    1    1    1    1    1   1   1   1

						     This chart shows the number of framing clocks
						     between address and data for fast mode--
						*/

 Signal bc_clean_victim_b(0,0);			/*  clean victim is being overwritten -cray	*/
 Signal bc_clean_victim_a(0,0);			/*  clean victim is being overwritten -cray	*/
 Signal bc_rdvictim_a(0,0);			/*  clean victim is being overwritten -cray	*/
 Signal sys_bus_size_a(1,0);			/*  usage of bits 1,0
							 1 1  -> ignore 1,0
							 1 0  -> illegal
							 0 1  -> ignore 0
							 0 0  -> use both
						*/

 Signal rdvic_ack_inhibit_a;			/*  inhibit ack update on rdvic commands       */
 Signal enable_stc_command_a;			/*  tell System about store conditionals       */
// Bcache PORT CSRs

 Signal bc_frm_clk_a;				/*  probe tags can probe under bc-hits under every slot  */
 Signal dcvic_threshold_a(7,0);	    		/* VAF threshold for bcvictims		    	*/
 Signal bc_rd_rd_bubbles_a(1,0);  		/*  If bank conflict, the rd to rd bubble  	*/
 Signal bc_rd_rd_bubble_a;     		/*  rd_rd bubble                                */
 Signal bc_wr_wr_bubble_a;     		/*  wr_wr bubble                                */
 Signal bc_clk_ratio_a(15,0);			/* sysclock ratio from 1X-8X in 0.5 incs    	*/


 Signal bc_clk_ld_vector_a(15,0);		/*  Initial bcache read clock waveform (see c_pads.mdl for patterns) */
 Signal bc_fdbk_en_a(7,0);			/*  Feedback tap to use for circular shift register generating bcache clock */
 Signal bc_bphase_ld_vector_a(3,0);		/*  Initial pattern for b-phase extension logic for the bcache clock (see c_pads.mdl for patterns) */

 Signal bc_rd_wr_bubbles_a(5,0);  		/* number of bcache cycles between rd and wr. 0-63    */
 Signal bc_late_write_num_a(2,0);  		/* enable write data to be delayed for 
							0-7 BcWrite cycles		        */
 Signal bc_wr_rd_bubbles_a(3,0);  		/* number of bcache cycles between wr and rd.
									     0-16                */

 Signal bc_cpu_late_write_num_a(1,0);  		/* enable delay of data wrt address by
							0-3 CPU cycles		   	        */
 Signal bc_cpu_clk_delay_a(1,0);  		/* enable delay of data wrt address by
							0-3 CPU cycles		   	        */

 Signal bc_burst_mode_enable_a;			/* is the Bcache burst mode 			*/
 Signal bc_lat_data_pattern_a(31,0);		/* data return pattern				*/
 Signal bc_lat_tag_pattern_a(23,0);		/* data return pattern				*/

 Signal bc_cf_double_clk_a;			/* bcache clocks are run double rate		  */
 Signal bc_clkfwd_enable_a;			/* enable clk-forwarding interface on bcache side */

 Signal bc_ddm_fall_en_a;			/* write bcache data on the falling edge of the clock    */
 Signal bc_ddm_rise_en_a;			/* write bcache data on the rising edge of the clock     */
 Signal bc_ddmf_enable_a;			/* enable falling edge of bcache clock (always set to 1) */
 Signal bc_ddmr_enable_a;			/* enable rising edge of bcache clock (always set to 1)  */
 Signal bc_ddm_rd_fall_en_a;			/* read bcache data on the falling edge of the clock     */
 Signal bc_ddm_rd_rise_en_a;			/* read bcache data on the rising edge of the clock      */

 Signal bc_tag_ddm_fall_en_a;			/* write bcache tag on the falling edge of the clock    */
 Signal bc_tag_ddm_rise_en_a;			/* write bcache tag on the rising edge of the clock     */
 Signal bc_tag_ddm_rd_fall_en_a;	 	/* read bcache tag on the falling edge of the clock     */
 Signal bc_tag_ddm_rd_rise_en_a;		/* read bcache tag on the rising edge of the clock      */

 Signal bc_pentium_mode_a;			/* pentium mode */

 Signal sys_cf_double_clk_a;			/* system clocks are run double rate		  */
 Signal sys_clkfwd_enable_a;			/* enable clk-forwarding interface on system side */

 Signal sys_ddm_fall_en_a;			/* write system data on the falling edge of the clock    */
 Signal sys_ddm_rise_en_a;			/* write system data on the rising edge of the clock     */
 Signal sys_ddmf_enable_a;			/* enable falling edge of system clock (always set to 1) */
 Signal sys_ddmr_enable_a;			/* enable rising edge of system clock (always set to 1)  */
 Signal sys_ddm_rd_fall_en_a;			/* read system data on the falling edge of the clock     */
 Signal sys_ddm_rd_rise_en_a;			/* read system data on the rising edge of the clock      */

 Signal sys_rcv_mux_cnt_preset_a(1,0);		/* the cnt value in the clock forwarding reciever system*/
 Signal bc_rcv_mux_cnt_preset_a(1,0);		/* the cnt value in the clock forwarding reciever bcache*/
 Signal frame_clock_offset_a(1,0);		/* number of bit times the framing clock is ahead of ref*/
 Signal data_valid_dly_a(1,0);			/* use delayed version of sys_data_in_valid based on sysdc delay */
 Signal jitter_cmd_a;				/* delay write Sysdc to make the write predictable */

 Signal bc_late_write_upper_a;			/* bc_late_write_num range select (0 = 0-3, 1 = 4-7) */

/*  CSR's which are writable via MBOX ipr chain */

 Signal bc_enable_b(0,0);	  		/*  there is a Bcache				*/
 Signal bc_enable_a(0,0);	  		/*  there is a Bcache				*/
 Signal raw_bc_size_a(4,1);	                /*  raw value from shift chain -- can have illegal values */
 Signal pad_raw_bc_size_a(4,1);	                /*  raw value from shift chain -- can have illegal values */
 Signal bc_size_a(4,1);	 	  		/*  1 Mbytes to 16 Mbytes. -- always a legal value */
 Signal pad_bc_size_a(4,1);	 	  		/*  1 Mbytes to 16 Mbytes. -- always a legal value */
 Signal bc_size_b(4,1);	 	  		/*  1 Mbytes to 16 Mbytes.			*/
						/* stored as 
							1 Mb: 0000
							2 Mb: 0001
							4 Mb: 0011
							8 Mb: 0111
						       16 Mb: 1111
						*/
 Signal  bc_bank_enable_a;			/*  in PASS2 logic for ~MSB drive */

 Signal init_mode_a;
  Signal init_mode_2_a;
 Signal machine_id_a(5,0);			/* machin id for IBOX */
 Signal bc_wrt_sts_a(3,0);			/* write status in test mode */
						/* Valid  (3)
			  			   Dirty  (2)
						   Shared (1)
						   Parity (0) 
						*/


 Signal bch_readclk_ratio_a(15,0);		/* sysclock ratio from 1X-8X in 0.5 incs  --- obsolete, remove when huggins catches up   	*/
 Signal bc_rdclk_ld_vector_a(15,0);		/* vector loaded to emulate bcread clocks --- obsolete, remove when huggins catches up      */
 Signal sys_add_clk_ld_vector_a(15,0);		/*  obsolete .. waiting for huggins to catchup */
 Signal add_sys_sysclk_ratio_a(15,0); 		/* sysclock ratio from 1X-8X in 0.5 incs  --- obsolete  	*/
 Signal enable_probe_chk_a;                     /* enable the checking of probe */


};


User {*
#define WRITE_MANY_MSB       35
#define WRITE_MANY_SEC0_MSB  25

#define WRITE_ONCE_MSB       350
#define WRITE_ONCE_SEC0_MSB  125	// last CSR in proper
#define WRITE_ONCE_SEC1_MSB  156	// last CSR in C_BNE_PAD/C_BNW_PAD
#define WRITE_ONCE_SEC2_MSB  218	// last CSR in C_BSE_PAD/C_BSW_PAD
#define WRITE_ONCE_SEC3_MSB  237	// last CSR in C_BRS_CFR
#define SROM_ICADDR_MSB 11
#define SROM_ICDATA_MSB 192
*};

//  IPRs are different than CSRs because they need access to the 
// EBOX register file

Container c_reg_ipr
{
   Signal   cbox_shift_a_h;

   Signal   write_once_select_a;
   Signal   write_once_select_1a;			// delayed versions of the shift signal
   Signal   write_once_select_2a;
   Signal   write_once_select_3a;
   Signal   write_once_select_4a;
   Signal   cbox_shiftdone_a_h(0,0);			// clock start pulse
   Signal   dly_flop1_a_h;				// delay flops 
   Signal   dly_flop2_a_h;
   Signal   dly_flop3_a_h;
   Signal   dly_flop4_a_h;
   Signal   write_once_a(WRITE_ONCE_MSB,0);		// write once shift register chain
   Signal   write_once_b(WRITE_ONCE_MSB,0);		// write once shift register chain

   Signal   write_many_shift_a;				// write many shift signal and delayed version
   Signal   write_many_shift_1a;
   Signal   write_many_dly_flop_a;			// write many delay flop
   Signal   write_many_b(WRITE_MANY_MSB,0);	        // write many shift register chain
   Signal   write_many_a(WRITE_MANY_MSB,0);	        // write many shift register chain

};

Container c_mtv_cfg
{
   Signal  mb_cntr_size_a(3,0);
   Signal  ica_sat_so_a_h(0,0);			// the input data
   Signal  shift_valid_b_h(WRITE_ONCE_MSB,0);		// Valid bits for selecting shift data
   Signal  shift_valid_a_h(WRITE_ONCE_MSB,0);		
   Signal  shift_data_b_h(WRITE_ONCE_MSB+16,0);		// Data bits to shift in
   Signal  shift_data_a_h(WRITE_ONCE_MSB+16,0);
   Signal  shift_done_dly1_a_h(0,0);
   Signal  shift_done_dly2_a_h(0,0);
   Signal  shift_done_dly3_a_h(0,0);

   Signal  shift_data_lsb_a_h(0,0);
   Signal  fake_srom_enable_h(0,0);
   Signal  fake_srom_data_h(0,0);
   Signal  fake_srom_clk_a_h(0,0);
   Signal  cbox_shift_a_h;
   Signal  fake_srom_icaddr_b_h(SROM_ICADDR_MSB,0);
   Signal  fake_srom_icaddr_a_h(SROM_ICADDR_MSB,0);
   Signal  fake_srom_icdata_b_h(SROM_ICDATA_MSB,0);
   Signal  fake_srom_icdata_a_h(SROM_ICDATA_MSB,0);

   Signal  write_many_b(WRITE_MANY_MSB,0);	        // write many shift register data chain
   Signal  write_many_a(WRITE_MANY_MSB,0);	        // write many shift register data chain
   Signal  write_many_val_b(WRITE_MANY_MSB,0);	        // write many shift register valid chain
   Signal  write_many_val_a(WRITE_MANY_MSB,0);	        // write many shift register valid chain
   Signal  undelayed_write_many_valid_h(0,0);
   Signal  write_many_valid_h(0,0);
};



