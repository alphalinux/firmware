;; Alpha assembly macro (-m) output created by DEFNR
;   
;  EV6_SYSTEM_PAL_IMPURE.DNR  
;   
;   
;  LAST EDIT:	18-MAY-98  
;   
;  EDIT HISTORY  
;  WHO	WHEN		WHAT  
;  ---	----		----  
;  ES	17-SEP-96	MOVED AROUND IMPURE LOCATIONS TO MATCH PREVIOUS  
; 				IMPLEMENTATIONS  
;  ES	17-OCT-96	RENAMED TO EV6_SYSTEM_PAL_IMPURE.DNR  
;  ES	21-NOV-96	CHANGED CBOX ERROR REGISTERS, DELETED THEM FROM CNS  
;  ES	08-APR-97	ELIMINATE CPU_BASE AND SYSTEM_BASE AND SIZE AS  
; 				AS LOCATIONS.  
; 				NOW NEED TO UPDATE THESE MANUALLY!  
;  ES	10-APR-97	CHANGED CBOX READ CHAIN NAMES.  
; 			ADDED PAL_BASE, I_CTL, PROCESS_CONTEXT TO MCHK.  
;  ES	09-APR-97	NEW LOGOUT FRAME ARRANGEMENT.  
;  ES	24-JUN-97	ELIMINATE VA AND VA_CTL. ADD MCHK REV'S. ADD/MOVE  
; 				AROUND RESERVED SPOTS.  
;  ES	15-AUG-97	ADDED SOME NAMES FOR DP264.  
;  ES	30-OCT-97	MOVE MM_STAT FROM LONG TO SHORT FRAME FOR  
; 				CORRECTED DC_TAG_PERR.  
;  ES	06-NOV-97	MOVE SROM PARAMETERS TO THE END OF THE IMPURE AREA  
;  ES	20-NOV-97	PUT SROM PARAMETERS BACK AT PLACEHOLDERS. ONLY DEBUG  
; 				MONITOR CARES. SRM PUTS IT WHERE IT WANTS  
; 				ANYWAY  
;  ES	18-MAY-98	ADD CNS__WRITE_MANY FOR SLEEP MODE.  
;   
;   
;  DEFINE CNS_SIZE  
;  THIS IS MANUALLY SET!  
;   

CNS__SIZE = ^x3b0	
; 
; DEFINE PREFIX AS CNS 
; 
;   
;  DEFINE OFFSETS  
;   

CNS__FLAG = ^x0	; DUMP FLAG 
CNS__HALT = ^x8	; HALT CODE 
CNS__R0 = ^x10	; INTEGER REGISTERS 
CNS__R1 = ^x18	
CNS__R2 = ^x20	
CNS__R3 = ^x28	
CNS__R4 = ^x30	
CNS__R5 = ^x38	
CNS__R6 = ^x40	
CNS__R7 = ^x48	
CNS__R8 = ^x50	
CNS__R9 = ^x58	
CNS__R10 = ^x60	
CNS__R11 = ^x68	
CNS__R12 = ^x70	
CNS__R13 = ^x78	
CNS__R14 = ^x80	
CNS__R15 = ^x88	
CNS__R16 = ^x90	
CNS__R17 = ^x98	
CNS__R18 = ^xa0	
CNS__R19 = ^xa8	
CNS__R20 = ^xb0	
CNS__R21 = ^xb8	
CNS__R22 = ^xc0	
CNS__R23 = ^xc8	
CNS__R24 = ^xd0	
CNS__R25 = ^xd8	
CNS__R26 = ^xe0	
CNS__R27 = ^xe8	
CNS__R28 = ^xf0	
CNS__R29 = ^xf8	
CNS__R30 = ^x100	
CNS__R31 = ^x108	
CNS__F0 = ^x110	; FLOATING POINT REGISTERS 
CNS__F1 = ^x118	
CNS__F2 = ^x120	
CNS__F3 = ^x128	
CNS__F4 = ^x130	
CNS__F5 = ^x138	
CNS__F6 = ^x140	
CNS__F7 = ^x148	
CNS__F8 = ^x150	
CNS__F9 = ^x158	
CNS__F10 = ^x160	
CNS__F11 = ^x168	
CNS__F12 = ^x170	
CNS__F13 = ^x178	
CNS__F14 = ^x180	
CNS__F15 = ^x188	
CNS__F16 = ^x190	
CNS__F17 = ^x198	
CNS__F18 = ^x1a0	
CNS__F19 = ^x1a8	
CNS__F20 = ^x1b0	
CNS__F21 = ^x1b8	
CNS__F22 = ^x1c0	
CNS__F23 = ^x1c8	
CNS__F24 = ^x1d0	
CNS__F25 = ^x1d8	
CNS__F26 = ^x1e0	
CNS__F27 = ^x1e8	
CNS__F28 = ^x1f0	
CNS__F29 = ^x1f8	
CNS__F30 = ^x200	
CNS__F31 = ^x208	
CNS__MCHKFLAG = ^x210	; DOES ANYONE USE THIS????? 
CNS__IMPURE = ^x218	; IMPORTANT PALTEMPS 
CNS__WHAMI = ^x220	
CNS__SCC = ^x228	
CNS__PRBR = ^x230	
CNS__PTBR = ^x238	
CNS__TRAP = ^x240	
CNS__HALT_CODE = ^x248	
CNS__KSP = ^x250	
CNS__SCBB = ^x258	
CNS__PCBB = ^x260	
CNS__VPTB = ^x268	
CNS__SROM_REV = ^x270	; DP264 DEBUG MONITOR 
CNS__PROC_ID = ^x278	; DP264 
CNS__MEM_SIZE = ^x280	; DP264 
CNS__CYCLE_CNT = ^x288	; DP264 
CNS__SIGNATURE = ^x290	; DP264 
CNS__PROC_MASK = ^x298	; DP264 
CNS__SYSCTX = ^x2a0	; DP264 
CNS__PLACE_HOLDER18 = ^x2a8	
CNS__PLACE_HOLDER19 = ^x2b0	
CNS__PLACE_HOLDER20 = ^x2b8	
CNS__PLACE_HOLDER21 = ^x2c0	
CNS__PLACE_HOLDER22 = ^x2c8	
CNS__PLACE_HOLDER23 = ^x2d0	
CNS__P4 = ^x2d8	; SHADOW REGISTERS 
CNS__P5 = ^x2e0	
CNS__P6 = ^x2e8	
CNS__P7 = ^x2f0	
CNS__P20 = ^x2f8	
CNS__P_TEMP = ^x300	
CNS__P_MISC = ^x308	
CNS__P23 = ^x310	
CNS__FPCR = ^x318	; IPRS 
CNS__VA = ^x320	
CNS__VA_CTL = ^x328	
CNS__EXC_ADDR = ^x330	
CNS__IER_CM = ^x338	
CNS__SIRR = ^x340	
CNS__ISUM = ^x348	
CNS__EXC_SUM = ^x350	
CNS__PAL_BASE = ^x358	
CNS__I_CTL = ^x360	
CNS__PCTR_CTL = ^x368	
CNS__PROCESS_CONTEXT = ^x370	
CNS__I_STAT = ^x378	
CNS__DTB_ALT_MODE = ^x380	
CNS__MM_STAT = ^x388	
CNS__M_CTL = ^x390	
CNS__DC_CTL = ^x398	
CNS__DC_STAT = ^x3a0	
CNS__WRITE_MANY = ^x3a8	
;   
;  DEFINE MCHK_CRD__BASE, MCHK_CRD_CPU_BASE,  
;  		MCHK_CRD__SYSTEM_BASE, AND MCHK_CRD__SIZE  
;  THESE ARE MANUALLY SET!  
;  ALSO HAVE REVISION NUMBER.  
;   

MCHK_CRD__REV = ^x1	
MCHK_CRD__BASE = ^x0	
MCHK_CRD__CPU_BASE = ^x18	
MCHK_CRD__SYSTEM_BASE = ^x58	
MCHK_CRD__SIZE = ^x58	
; 
; DEFINE PREFIX AS MCHK_CRD 
; 
;   
;  DEFINE MCHK_CRD OFFSETS  
;   

MCHK_CRD__FLAG_FRAME = ^x0	
MCHK_CRD__OFFSETS = ^x8	
MCHK_CRD__MCHK_CODE = ^x10	; START OF PAL SPECIFIC 
MCHK_CRD__I_STAT = ^x18	; START OF CPU SPECIFIC 
MCHK_CRD__DC_STAT = ^x20	
MCHK_CRD__C_ADDR = ^x28	
MCHK_CRD__DC1_SYNDROME = ^x30	
MCHK_CRD__DC0_SYNDROME = ^x38	
MCHK_CRD__C_STAT = ^x40	
MCHK_CRD__C_STS = ^x48	
MCHK_CRD__MM_STAT = ^x50	
;   
;  DEFINE MCHK__BASE, MCHK__CPU_BASE, MCHK__SYSTEM_BASE, MCHK__SIZE  
;  THESE ARE MANUALLY SET!  
;  ALSO HAVE REVISION NUMBER.  
;   

MCHK__REV = ^x1	
MCHK__BASE = ^x100	
MCHK__CPU_BASE = ^x18	
MCHK__SYSTEM_BASE = ^xa0	
MCHK__SIZE = ^xa0	
; 
; DEFINE PREFIX AS MCHK 
; 
;   
;  DEFINE MCHK OFFSETS  
;   

MCHK__FLAG_FRAME = ^x0	
MCHK__OFFSETS = ^x8	
MCHK__MCHK_CODE = ^x10	; START OF PAL SPECIFIC 
MCHK__I_STAT = ^x18	; START OF CPU SPECIFIC COMMON 
MCHK__DC_STAT = ^x20	
MCHK__C_ADDR = ^x28	
MCHK__DC1_SYNDROME = ^x30	
MCHK__DC0_SYNDROME = ^x38	
MCHK__C_STAT = ^x40	
MCHK__C_STS = ^x48	
MCHK__MM_STAT = ^x50	
MCHK__EXC_ADDR = ^x58	; START OF CPU SPECIFIC, MCHK ONLY 
MCHK__IER_CM = ^x60	
MCHK__ISUM = ^x68	
MCHK__RESERVED_0 = ^x70	
MCHK__PAL_BASE = ^x78	
MCHK__I_CTL = ^x80	
MCHK__PROCESS_CONTEXT = ^x88	
MCHK__RESERVED_1 = ^x90	
MCHK__RESERVED_2 = ^x98	

