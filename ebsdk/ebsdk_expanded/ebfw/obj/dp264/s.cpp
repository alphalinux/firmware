# 1 "srom.s"















































































































































































































































































































































































# 1 "./dc21264.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































# 369 "srom.s"
# 1 "./wm.h"


































































































































































































































































# 370 "srom.s"
# 1 "./tsunami.h"





















































































































































































































































# 371 "srom.s"
# 1 "./io.h"















































































# 1 "./ascitab.h"




























































































































































































# 81 "./io.h"
















					  














































































































































































































































# 370 "./io.h"































































































				

				
				





















					




















































                                

                                




# 372 "srom.s"





# 1 "/sae_users/paradis/sdk-cdbuild/CDIMAGE/ebsdk/ebfw/obj/dp264//rcsv.h"


# 378 "srom.s"
























































EntryPoint:


	
. = 	0x100			; DTBM_DOUBLE_3:
		lda	$29, 8($31);                    	lda $16, (  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x33 << 8) | ( 0x4d << 0) )&0xffff)( $31)		;  ldah $16, ((  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x33 << 8) | ( 0x4d << 0) )+0x8000)>>16)($16)	; ; sll  $16, 32, $16; lda $16, (  	( ( 0x42 << 24) | ( 0x54 << 16) | ( 0x44 << 8) | (0x2a << 0) )&0xffff)( $16)		;  ldah $16, ((  	( ( 0x42 << 24) | ( 0x54 << 16) | ( 0x44 << 8) | (0x2a << 0) )+0x8000)>>16)($16)	; ;; 	bsr	$0, minidebugger ;

	
. = 	0x180			; DTBM_DOUBLE_4:
		lda	$29, 8($31);                    	lda $16, (  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x34 << 8) | ( 0x4d << 0) )&0xffff)( $31)		;  ldah $16, ((  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x34 << 8) | ( 0x4d << 0) )+0x8000)>>16)($16)	; ; sll  $16, 32, $16; lda $16, (  	( ( 0x42 << 24) | ( 0x54 << 16) | ( 0x44 << 8) | (0x2a << 0) )&0xffff)( $16)		;  ldah $16, ((  	( ( 0x42 << 24) | ( 0x54 << 16) | ( 0x44 << 8) | (0x2a << 0) )+0x8000)>>16)($16)	; ;; 	bsr	$0, minidebugger ;

	
. = 	0x200			; FEN:
		lda	$29, 8($31);                    	lda $16, (  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x00 << 8) | ( 0x2a << 0) )&0xffff)( $31)		;  ldah $16, ((  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x00 << 8) | ( 0x2a << 0) )+0x8000)>>16)($16)	; ; sll  $16, 32, $16; lda $16, (  	( ( 0x4e << 24) | ( 0x45 << 16) | ( 0x46 << 8) | (0x2a << 0) )&0xffff)( $16)		;  ldah $16, ((  	( ( 0x4e << 24) | ( 0x45 << 16) | ( 0x46 << 8) | (0x2a << 0) )+0x8000)>>16)($16)	; ;; 	bsr	$0, minidebugger ;

	
. = 	0x280			; UNALIGN:
		lda	$29, 8($31);                    	lda $16, (  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x69 << 8) | ( 0x6c << 0) )&0xffff)( $31)		;  ldah $16, ((  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x69 << 8) | ( 0x6c << 0) )+0x8000)>>16)($16)	; ; sll  $16, 32, $16; lda $16, (  	( ( 0x41 << 24) | ( 0x6e << 16) | ( 0x55 << 8) | (0x2a << 0) )&0xffff)( $16)		;  ldah $16, ((  	( ( 0x41 << 24) | ( 0x6e << 16) | ( 0x55 << 8) | (0x2a << 0) )+0x8000)>>16)($16)	; ;; 	bsr	$0, minidebugger ;

	
. = 	0x300			; DTBM_SINGLE:
		lda	$29, 8($31);                    	lda $16, (  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x2a << 8) | ( 0x4d << 0) )&0xffff)( $31)		;  ldah $16, ((  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x2a << 8) | ( 0x4d << 0) )+0x8000)>>16)($16)	; ; sll  $16, 32, $16; lda $16, (  	( ( 0x42 << 24) | ( 0x54 << 16) | ( 0x44 << 8) | (0x2a << 0) )&0xffff)( $16)		;  ldah $16, ((  	( ( 0x42 << 24) | ( 0x54 << 16) | ( 0x44 << 8) | (0x2a << 0) )+0x8000)>>16)($16)	; ;; 	bsr	$0, minidebugger ;
	hw_mfpr	$0, (( 0x06 << 8) | 0x0)		

	lda	$2, 0x3301($31)			
	srl	$1, 13, $2			
	sll	$2, 0x20, $2	
	bis	$2, $2, $2			

	hw_mtpr	$1, (( 0x20 << 8) | 0x44)		
	hw_mtpr	$1, (( 0xA0 << 8) | 0x22)		
	hw_mtpr	$2, (( 0x21 << 8) | 0x11)		
	hw_mtpr	$2, (( 0xA1 << 8) | 0x88)		
	hw_rets/jmp	($0)			

	
. = 	0x380			; DFAULT:
		lda	$29, 8($31);                    	lda $16, (  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x2a << 8) | ( 0x74 << 0) )&0xffff)( $31)		;  ldah $16, ((  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x2a << 8) | ( 0x74 << 0) )+0x8000)>>16)($16)	; ; sll  $16, 32, $16; lda $16, (  	( ( 0x6c << 24) | ( 0x46 << 16) | ( 0x44 << 8) | (0x2a << 0) )&0xffff)( $16)		;  ldah $16, ((  	( ( 0x6c << 24) | ( 0x46 << 16) | ( 0x44 << 8) | (0x2a << 0) )+0x8000)>>16)($16)	; ;; 	bsr	$0, minidebugger ;

	
. = 	0x400			; OPCDEC:
		lda	$29, 8($31);                    	lda $16, (  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x43 << 8) | ( 0x45 << 0) )&0xffff)( $31)		;  ldah $16, ((  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x43 << 8) | ( 0x45 << 0) )+0x8000)>>16)($16)	; ; sll  $16, 32, $16; lda $16, (  	( ( 0x44 << 24) | ( 0x50 << 16) | ( 0x4f << 8) | (0x2a << 0) )&0xffff)( $16)		;  ldah $16, ((  	( ( 0x44 << 24) | ( 0x50 << 16) | ( 0x4f << 8) | (0x2a << 0) )+0x8000)>>16)($16)	; ;; 	bsr	$0, minidebugger ;

	
. = 	0x480			; IACV:
		lda	$29, 8($31);                    	lda $16, (  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x6f << 8) | ( 0x69 << 0) )&0xffff)( $31)		;  ldah $16, ((  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x6f << 8) | ( 0x69 << 0) )+0x8000)>>16)($16)	; ; sll  $16, 32, $16; lda $16, (  	( ( 0x56 << 24) | ( 0x63 << 16) | ( 0x41 << 8) | (0x2a << 0) )&0xffff)( $16)		;  ldah $16, ((  	( ( 0x56 << 24) | ( 0x63 << 16) | ( 0x41 << 8) | (0x2a << 0) )+0x8000)>>16)($16)	; ;; 	bsr	$0, minidebugger ;

	
. = 	0x500			; MCHK:
 
	mb
	mb
	mb
	mb
	br	$31, FatalError
	mb
	mb
	mb

	
. = 	0x580			; ITB_MISS:
		lda	$29, 8($31);                    	lda $16, (  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x2a << 8) | ( 0x4d << 0) )&0xffff)( $31)		;  ldah $16, ((  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x2a << 8) | ( 0x4d << 0) )+0x8000)>>16)($16)	; ; sll  $16, 32, $16; lda $16, (  	( ( 0x42 << 24) | ( 0x54 << 16) | ( 0x49 << 8) | (0x2a << 0) )&0xffff)( $16)		;  ldah $16, ((  	( ( 0x42 << 24) | ( 0x54 << 16) | ( 0x49 << 8) | (0x2a << 0) )+0x8000)>>16)($16)	; ;; 	bsr	$0, minidebugger ;

	
. = 	0x600			; ARITH:
		lda	$29, 8($31);                    	lda $16, (  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x48 << 8) | ( 0x54 << 0) )&0xffff)( $31)		;  ldah $16, ((  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x48 << 8) | ( 0x54 << 0) )+0x8000)>>16)($16)	; ; sll  $16, 32, $16; lda $16, (  	( ( 0x49 << 24) | ( 0x52 << 16) | ( 0x41 << 8) | (0x2a << 0) )&0xffff)( $16)		;  ldah $16, ((  	( ( 0x49 << 24) | ( 0x52 << 16) | ( 0x41 << 8) | (0x2a << 0) )+0x8000)>>16)($16)	; ;; 	bsr	$0, minidebugger ;

	
. = 	0x680			; INTERRUPT:
		lda	$29, 8($31);                    	lda $16, (  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x00 << 8) | ( 0x52 << 0) )&0xffff)( $31)		;  ldah $16, ((  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x00 << 8) | ( 0x52 << 0) )+0x8000)>>16)($16)	; ; sll  $16, 32, $16; lda $16, (  	( ( 0x54 << 24) | ( 0x4e << 16) | ( 0x49 << 8) | (0x2a << 0) )&0xffff)( $16)		;  ldah $16, ((  	( ( 0x54 << 24) | ( 0x4e << 16) | ( 0x49 << 8) | (0x2a << 0) )+0x8000)>>16)($16)	; ;; 	bsr	$0, minidebugger ;

	
. = 	0x700			; MT_FPCR:
		lda	$29, 8($31);                    	lda $16, (  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x00 << 8) | ( 0x52 << 0) )&0xffff)( $31)		;  ldah $16, ((  	( ( 0x0a << 24) | ( 0x0d << 16) | ( 0x00 << 8) | ( 0x52 << 0) )+0x8000)>>16)($16)	; ; sll  $16, 32, $16; lda $16, (  	( ( 0x43 << 24) | ( 0x50 << 16) | ( 0x46 << 8) | (0x2a << 0) )&0xffff)( $16)		;  ldah $16, ((  	( ( 0x43 << 24) | ( 0x50 << 16) | ( 0x46 << 8) | (0x2a << 0) )+0x8000)>>16)($16)	; ;; 	bsr	$0, minidebugger ;


. = 	0x780			; RESET_ENTRY:










































# 654 "srom.s"

	addq	$31,$31,$0		
	addq	$31,$31,$1		
	addt	$f31,$f31,$f0		
	mult	$f31,$f31,$f1		

	addq	$31,$31,$2		
	addq	$31,$31,$3		
	addt	$f31,$f31,$f2		
	mult	$f31,$f31,$f3		

	addq	$31,$31,$4		
	addq	$31,$31,$5		
	addt	$f31,$f31,$f4		
	mult	$f31,$f31,$f5		

	addq	$31,$31,$6		
	addq	$31,$31,$7		
	addt	$f31,$f31,$f6		
	mult	$f31,$f31,$f7		

	addq	$31,$31,$8		
	addq	$31,$31,$9		
	addt	$f31,$f31,$f8		
	mult	$f31,$f31,$f9		

	addq	$31,$31,$10		
	addq	$31,$31,$11		
	addt	$f31,$f31,$f10		
	mult	$f31,$f31,$f11		

	addq	$31,$31,$12		
	addq	$31,$31,$13		
	addt	$f31,$f31,$f12		
	mult	$f31,$f31,$f13		

	addq	$31,$31,$14		
	addq	$31,$31,$15		
	addt	$f31,$f31,$f14		
	mult	$f31,$f31,$f15		

	addq	$31,$31,$16		
	addq	$31,$31,$17		
	addt	$f31,$f31,$f16		
	mult	$f31,$f31,$f17		

	addq	$31,$31,$18		
	addq	$31,$31,$19		
	addt	$f31,$f31,$f18		
	mult	$f31,$f31,$f19		

	addq	$31,$31,$20		
	addq	$31,$31,$21		
	addt	$f31,$f31,$f20		
	mult	$f31,$f31,$f21		

	addq	$31,$31,$22		
	addq	$31,$31,$23		
	addt	$f31,$f31,$f22		
	mult	$f31,$f31,$f23		

	addq	$31,$31,$24		
	addq	$31,$31,$25		
	addt	$f31,$f31,$f24		
	mult	$f31,$f31,$f25		

	addq	$31,$31,$26		
	addq	$31,$31,$27		
	addt	$f31,$f31,$f26		
	mult	$f31,$f31,$f27		

	addq	$31,$31,$28		
	addq	$31,$31,$29		
	addt	$f31,$f31,$f28		
	mult	$f31,$f31,$f29		

	addq	$31,$31,$30		
	addt	$f31,$f31,$f30		
	addq	$31,$31,$0		
	addq	$31,$31,$0		

	addq	$31,$31,$0		
	addq	$31,$31,$0		
	addq	$31,$31,$0		
	addq	$31,$31,$0		

	addq	$31,$31,$0		
	addq	$31,$31,$0		
	addq	$31,$31,$0		
	addq	$31,$31,$0		

	addq	$31,$31,$0		
	addq	$31,$31,$0		
	addq	$31,$31,$0		
	addq	$31,$31,$0		

	addq	$31,$31,$0		
	addq	$31,$31,$0		
	addq	$31,$31,$0		
	addq	$31,$31,$0		




	hw_mtpr $31,(( 0x03 << 8) | 0x10)		
	hw_mtpr $31,(( 0xA3 << 8) | 0x80)		
	hw_mtpr $31,(( 0xC4 << 8) | 0x20)		
	hw_mtpr $31,(( 0x28 << 8) | 0x40)		







	hw_mtpr $31,(( 0x25 << 8) | 0x10)	
	hw_mtpr $31,(( 0xA5 << 8) | 0x80)	
	hw_mtpr $31,(( 0xC1 << 8) | 0x20)		
	hw_mtpr $31,(( 0x26 << 8) | 0x40)	




















	addq	$31,$31,$0		
	addq	$31,$31,$0		
	addq	$31,$31,$0		
	br	$31, tch0		

	.align 3
nxt0:	lda	$0,0x0086($31)		
	hw_mtpr $0,(( 0x11 << 8) | 0x10)		
	br	$31, nxt1		
tch0:	br	$31, tch1		

nxt1:	hw_mtpr $31,(( 0x0B << 8) | 0x10)		
	addq	$31,$31,$0		
	br	$31, nxt2		
tch1:	br	$31, tch2		

nxt2:	addq	$31,$31,$0		
	addq	$31,$31,$0		
	br	$31, nxt3		
tch2:	br	$31, tch3		

nxt3:	addq	$31,$31,$0		
	addq	$31,$31,$0		
	br	$31, nxt4		
tch3:	br	$31, tch4		

nxt4:	addq	$31,$31,$0		
	addq	$31,$31,$0		
	br	$31, nxt5		
tch4:	br	$31, tch5		

nxt5:	addq	$31,$31,$4		
	addq	$31,$31,$5		
	br	$31, nxt6		
tch5:	br	$31, tch6		

nxt6:	addq	$31,$31,$6		
	addq	$31,$31,$7		
	br	$31, nxt7		
tch6:	br	$31, tch7		

nxt7:	addq	$31,$31,$20		
	addq	$31,$31,$21		
	br	$31, nxt8		
tch7:	br	$31, tch8		

nxt8:	addq	$31,$31,$22		
	addq	$31,$31,$23		
	br	$31, nxt9		
tch8:	br	$31, nxt0		
nxt9:





































loadwm:
	lda	$1, 			((((		0)>>(	0)) & 1) * (0x1)) | 		((((		0)>>(	1)) & 1) * (0x2)) | 		((((		0)>>(	2)) & 1) * (0x4)) | 		((((		0)>>(	3)) & 1) * (0x8))($31)
	sll	$1, 32, $1		
	lda $1, ( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		0)>>(	0)) & 1) * (0x20000001)) | 		((((		0)>>(	1)) & 1) * (0x10000800)) | 		((((		0)>>(	2)) & 1) * (0x08000400)) | 		((((		0)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))&0xffff)( $1)		;  ldah $1, (( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		0)>>(	0)) & 1) * (0x20000001)) | 		((((		0)>>(	1)) & 1) * (0x10000800)) | 		((((		0)>>(	2)) & 1) * (0x08000400)) | 		((((		0)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))+0x8000)>>16)($1)	; 
	addq	$31,6,$0		
	mb				

	br	$31, bccshf
	.align 6
bccshf:	hw_mtpr	$1,(( 0x2B << 8) | 0x40)		
	subq	$0,1,$0			
	beq	$0,bccend		
        srl	$1,6,$1			

	br	$31,bccshf		
bccend:	hw_mtpr	$31,(( 0x06 << 8) | 0x0) + 16	
	addq	$31,$31,$0		
	addq	$31,$31,$1		

	hw_mtpr	$31,(( 0x06 << 8) | 0x0) + 16	
	beq	$31, bccnxt		
	br	$31, .-4		
	addq	$31,$31,$1		

bccnxt:	addq	$31,4,$0		
	hw_mtpr 	$0,(( 0x5F << 8) | 0x10)	
	lda	$0,0x3($31)	
	hw_mtpr 	$0,(( 0x29 << 8) | 0x40)		

	addq	$31,$31,$0		
	addq	$31,$31,$1		
	lda	$0,0xff61($31)		
	zap	$0,0xfc,$0		

	hw_mtpr	$31,(( 0x20 << 8) | 0x44)	
	hw_mtpr	$31,(( 0xA0 << 8) | 0x22)	
	hw_mtpr	$0,(( 0x21 << 8) | 0x11)	
	hw_mtpr	$0,(( 0xA1 << 8) | 0x88)	

	hw_mtpr $31,(( 0x0C << 8) | 0x10)		
	lda	$0,0x08FF($31)		
	sll	$0,52,$0		





	itoft   $0, $f0			

	mt_fpcr $f0			

	lda	$0,0x2086($31)		
	ldah	$0,0x0050($0)		
	hw_mtpr	$0,(( 0x11 << 8) | 0x10)		

	hw_mtpr $31,(( 0xC0 << 8) | 0x20)		
	lda	$0,0x001F($31)		
	sll	$0,28,$0		
	hw_mtpr	$0,(( 0x0E << 8) | 0x10)	

	hw_mtpr	$0,(( 0x16 << 8) | 0x10)		
	lda	$0,0x001F($31)		
	hw_mtpr	$0,(( 0x2A << 8) | 0x40)		
	addq	$31,$31,$0		

	hw_mtpr	$31,(( 0x14 << 8) | 0x10)	
	bis	$31,1,$0		
	bis	$31,1,$0		
	mulq/v	$31,$31,$0		

	hw_mtpr	$31,(( 0x14 << 8) | 0x10)	
	bis	$31,1,$0		
	bis	$31,1,$0		
	mulq	$31,$31,$0		

	lda    $0,0x780($31)            







	mb
	whint   $0                       
	mb
	bis	$31,1,$0		


	hw_ldq/p $1,0x780($31)		
	hw_ldq/p $0,0x788($31)		
	mb				
	mb				

	hw_stq/p $1,0x780($31)		
	hw_stq/p $0,0x788($31)		
	bis	$31, 32, $0		
jsr_init_loop:
	bsr	$31,jsr_init_loop_nxt			
jsr_init_loop_nxt:
	hw_stq/p $1,0x780($31)		
	subq	$0,1,$0		
	beq	$0,jsr_init_done	
	br	$31,jsr_init_loop	

jsr_init_done:

	lda	$0,0x03FF($31)		
	sll	$0,52,$0		
	itoft	$0,$f0			
	addq	$31,$31,$1		

	mult	$f0,$f0,$f0		
	addt	$f0,$f0,$f0		
	divt	$f0,$f0,$f0		
	sqrtt	$f0,$f0			

	cvtqt	$f0,$f0			
        perr    $31,$31,$0  	        
        maxuw4  $31,$31,$0              
        pkwb    $31,$0                  








	rc	$0			
	addq	$31,$31,$1		
	addq	$31,$31,$1		
	addq	$31,$31,$1		











	br $31,palbase_init
palbase_init:
	br	$0, br60		
br60:	lda	$1, (EntryPoint-br60)($0) 
	hw_mtpr	$1, (( 0x10 << 8) | 0x10)	


	bis	$31, 2, $0
	hw_mtpr	$0, (( 0xC4 << 8) | 0x20)

	bis	$31, 8, $0
	hw_mtpr	$0, (( 0x28 << 8) | 0x40)

	br	$0, jmp0
jmp0:	addq	$0, (jmp1-jmp0+1), $0
	hw_rets/jmp	($0)
jmp1:

	lda	$1,  1($31)		
	sll	$1,  32, $1
	hw_mtpr	$1, (( 0xC1 << 8) | 0x20) 	










sweep_dcache:
	lda	$0, 0x8000($31)		
	sll	$0, 32, $0		



	ldah	$0, 1($0)		

sweep_dcache0:
	subq	$0, 64, $0
	whint	$0
	zap	$0, 0xf0, $1
	bne	$1, sweep_dcache0
	mb






















































































































































































 
 
 




 












































































































































































init_tsunami:




# 1476 "srom.s"






	    lda $9, (  0x801A0&0xffff)( $31)		;  ldah $9, ((  0x801A0+0x8000)>>16)($9)	; 	;		    sll	    $9, 24              , $9;	
	lda	$9, 0x080($9)	
	mb
	hw_ldq/p	$30, 0($9)		
	and	$30, 3	, $30	
	sll	$30, 9, $24		






	


	lda	$6, 1($31)		
	sll	$6, $30, $6		
	sll	$6, 16, $6		
	sll	$6, 4, $7		
	bis	$7, $6, $7		
	hw_stq/p	$7, 0($9)		
	mb

	


	hw_ldq/p	$7, 0($9)		
	and	$7, $6, $7		
	beq	$7, NotPrimary		
	bis	$30, (1<<3), $30	

	



	lda	$7, 30($31)		
WhoIsPresent:
	subq	$7, 1, $7
	lda $16, ( 30000000&0xffff)( $31)		;  ldah $16, (( 30000000+0x8000)>>16)($16)	; 	
	bsr	$27, wait_n_cycles 	

	hw_ldq/p	$6, 0($9)		
	srl	$6, 20, $6		
	and	$6, ((1<<2)-1), $6	







	beq	$7, CPUTimedOut		
	cmpeq	$6, ((1<<2)-1), $5	
	beq	$5, WhoIsPresent	
CPUTimedOut:
	sll	$6, 4, $25	
	bis	$30, $25, $30		


NotPrimary:

		bis	$31, $25, $16		; 		lda $9, ( (((  0x19)|(2))>>32)&0xffff)( $31)		;  ldah $9, (( (((  0x19)|(2))>>32)+0x8000)>>16)($9)	; 	; 	sll	$9, 32, $9			; 	lda $8, ( ((  0x19)|(2))&0xffff)( $31)		;  ldah $8, (( ((  0x19)|(2))+0x8000)>>16)($8)	; 	; 	zap	$8, 0xf0, $8			; 	bis	$8, $9, $8			; 	bsr	$26, SyncronizeCPUs		;	; 	bis	$31, $16, $25		;


First_InitBcache:





























	lda $2, ( 			((((		15)>>(	0)) & 1) * (0x1)) | 		((((		15)>>(	1)) & 1) * (0x2)) | 		((((		15)>>(	2)) & 1) * (0x4)) | 		((((		15)>>(	3)) & 1) * (0x8))&0xffff)( $31)		;  ldah $2, (( 			((((		15)>>(	0)) & 1) * (0x1)) | 		((((		15)>>(	1)) & 1) * (0x2)) | 		((((		15)>>(	2)) & 1) * (0x4)) | 		((((		15)>>(	3)) & 1) * (0x8))+0x8000)>>16)($2)	; 
	sll	$2, 32, $2

	lda $14, ( 		((((		1)>>(	0)) & 1) * (0x439ce000))		| 		((((		1)>>(	0)) & 1) * (0x80000002))		| 			((((		15)>>(	0)) & 1) * (0x20000001)) | 		((((		15)>>(	1)) & 1) * (0x10000800)) | 		((((		15)>>(	2)) & 1) * (0x08000400)) | 		((((		15)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))&0xffff)( $31)		;  ldah $14, (( 		((((		1)>>(	0)) & 1) * (0x439ce000))		| 		((((		1)>>(	0)) & 1) * (0x80000002))		| 			((((		15)>>(	0)) & 1) * (0x20000001)) | 		((((		15)>>(	1)) & 1) * (0x10000800)) | 		((((		15)>>(	2)) & 1) * (0x08000400)) | 		((((		15)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))+0x8000)>>16)($14)	; 
	zap	$14, 0xf0, $14
	bis	$14, $2, $14

	lda $2, ( 0x001C0000&0xffff)( $31)		;  ldah $2, (( 0x001C0000+0x8000)>>16)($2)	; 
	bic	$14, $2, $14

PrintChain:
		lda	$29, 3($31);		lda	$28, 0x2e($31);				bsr	$0, minidebugger ;
	srl	$14, 32, $17
		lda	$29, 7($31);		bis	$31, $17, $28;				bsr	$0, minidebugger ;
	bis	$14, $31, $17
		lda	$29, 2($31);		bis	$31, $17, $28;				bsr	$0, minidebugger ;

	addq	$31, 6, $0		
	bis	$14, $31, $12		
	mb				

	br	$31, BCshf
	.align 6
BCshf:	hw_mtpr	$12, (( 0x2B << 8) | 0x40)		
	subq	$0, 1, $0		
	beq	$0, BCend		
        srl	$12, 6, $12		

	br	$31, BCshf		
BCend:	hw_mtpr	$31, (( 0x06 << 8) | 0x0) + 16	
	addq	$31, $31, $0		
	addq	$31, $31, $12		

	hw_mtpr	$31, (( 0x06 << 8) | 0x0) + 16	
	beq	$31, BCnxt		
	br	$31, .-4		
	addq	$31, $31, $12		
BCnxt:
	mb				

	bis	$31, 16, $8		

sweep_bcache:
	ldah	$0, 0x8000($31)		
	sll	$0, 16, $0		
	sll	$8, (20), $1		
	bis	$0, $1, $0

	br	$31, sweep_bcache0
	.align 6
sweep_bcache0:
	subq	$0, 64, $0
	whint	$0
	mb				
	zap	$0, 0xf0, $1
	srl	$1, 4, $1
	mb
	bne	$1, sweep_bcache0
	mb				



















load_turn_off_bcache:
	lda	$1, 			((((		0)>>(	0)) & 1) * (0x1)) | 		((((		0)>>(	1)) & 1) * (0x2)) | 		((((		0)>>(	2)) & 1) * (0x4)) | 		((((		0)>>(	3)) & 1) * (0x8))($31)
	sll	$1, 32, $1		
	lda $12, ( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		0)>>(	0)) & 1) * (0x20000001)) | 		((((		0)>>(	1)) & 1) * (0x10000800)) | 		((((		0)>>(	2)) & 1) * (0x08000400)) | 		((((		0)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))&0xffff)( $1)		;  ldah $12, (( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		0)>>(	0)) & 1) * (0x20000001)) | 		((((		0)>>(	1)) & 1) * (0x10000800)) | 		((((		0)>>(	2)) & 1) * (0x08000400)) | 		((((		0)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))+0x8000)>>16)($12)	; 
	addq	$31, 6, $0		
	mb				

BC_again_shf:	hw_mtpr	$12, (( 0x2B << 8) | 0x40)		
	subq	$0, 1, $0		
	beq	$0, BC_again_end		
        srl	$12, 6, $12		

	br	$31, BC_again_shf		
BC_again_end:	hw_mtpr	$31, (( 0x06 << 8) | 0x0) + 16	
	addq	$31, $31, $0		
	addq	$31, $31, $12		

	hw_mtpr	$31, (( 0x06 << 8) | 0x0) + 16	
	beq	$31, BC_again_nxt		
	br	$31, .-4		
	addq	$31, $31, $12		
BC_again_nxt:
	mb				

	srl	$30, 3, $1
	blbc	$1, ReadJumpers

dep_CSC:



	lda $17, ( 0x00424400&0xffff)( $31)		;  ldah $17, (( 0x00424400+0x8000)>>16)($17)	; 

	sll	$17, 32, $17
	lda $16, ( 0x15150000&0xffff)( $31)		;  ldah $16, (( 0x15150000+0x8000)>>16)($16)	; 
	zap	$16, 0xf0, $16
	bis	$17, $16, $17
	    lda $16, (  0x801A0&0xffff)( $31)		;  ldah $16, ((  0x801A0+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
	lda	$16, 0x000($16)
	bsr	$26, srom_wrtest	
	bis	$31, $18, $14		 












	lda $16, ( (20*24)&0xffff)( $31)		;  ldah $16, (( (20*24)+0x8000)>>16)($16)	; 	
	bsr	$27, wait_n_cycles 	



dep_STR:
	lda $17, 0x24($31)
	and	$14, 1, $16		 
	bis	$17, $16, $17		 
	xor	$16, 1, $16
	s4addq	$16, $17, $17
	sll	$17, 8, $16
	bis	$17, $16, $17
	sll	$17, 16, $16
	bis	$17, $16, $17
	sll	$17, 32, $16
	bis	$17, $16, $17
	    lda $16, (  0x801B0&0xffff)( $31)		;  ldah $16, ((  0x801B0+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
	lda	$16, 0x840($16)
	bsr	$26, srom_wrtest	









	lda $16, ( (20*24)&0xffff)( $31)		;  ldah $16, (( (20*24)+0x8000)>>16)($16)	; 	
	bsr	$27, wait_n_cycles 	




dep_PCTL0:





	lda $17, ( 0x00001044&0xffff)( $31)		;  ldah $17, (( 0x00001044+0x8000)>>16)($17)	; 
	sll	$17, 32, $17
	lda $17, ( 0x00440081&0xffff)( $17)		;  ldah $17, (( 0x00440081+0x8000)>>16)($17)	; 


	bic	$17, 0x80, $17








	    lda $16, (  0x80180&0xffff)( $31)		;  ldah $16, ((  0x80180+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
	lda	$16, 0x300($16)
	bsr	$26, srom_wrtest	
	srl	$14, 14, $0		 
	blbc	$0, dep_TTR		 

dep_PCTL1:
	lda $17, ( 0x00001044&0xffff)( $31)		;  ldah $17, (( 0x00001044+0x8000)>>16)($17)	; 
	sll	$17, 32, $17
	lda $17, ( 0x00440081&0xffff)( $17)		;  ldah $17, (( 0x00440081+0x8000)>>16)($17)	; 
	    lda $16, (  0x80380&0xffff)( $31)		;  ldah $16, ((  0x80380+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
	lda	$16, 0x300($16)
	bsr	$26, srom_wrtest	


dep_TTR:
	lda $17, ( 0x00000000&0xffff)( $31)		;  ldah $17, (( 0x00000000+0x8000)>>16)($17)	; 
	sll	$17, 32, $17
	lda $17, ( 0x00002103&0xffff)( $17)		;  ldah $17, (( 0x00002103+0x8000)>>16)($17)	; 
	    lda $16, (  0x801A0&0xffff)( $31)		;  ldah $16, ((  0x801A0+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
	lda	$16, 0x580($16)
	bsr	$26, srom_wrtest	


dep_TDR:
	lda $17, ( 0xF37FF37F&0xffff)( $31)		;  ldah $17, (( 0xF37FF37F+0x8000)>>16)($17)	; 
	sll	$17, 32, $17
	lda $16, ( 0xF37FF37F&0xffff)( $31)		;  ldah $16, (( 0xF37FF37F+0x8000)>>16)($16)	; 
	zap	$16, 0xf0, $16
	bis	$17, $16, $17
	    lda $16, (  0x801A0&0xffff)( $31)		;  ldah $16, ((  0x801A0+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
	lda	$16, 0x5C0($16)
	bsr	$26, srom_wrtest	

	br	$31, Sync20

ReadJumpers:
	




	bis	$30, $25, $30		
	ldah	$5, 20($31)		
Wait0:
	subq	$5, 1, $5
	bne	$5, Wait0

Sync20:
		lda $9, ( ((( 0x20)|(1))>>32)&0xffff)( $31)		;  ldah $9, (( ((( 0x20)|(1))>>32)+0x8000)>>16)($9)	; 	; 	sll	$9, 32, $9			; 	lda $8, ( (( 0x20)|(1))&0xffff)( $31)		;  ldah $8, (( (( 0x20)|(1))+0x8000)>>16)($8)	; 	; 	zap	$8, 0xf0, $8			; 	bis	$8, $9, $8			; 	bsr	$26, SyncronizeCPUs		;

	    lda $18, (  0x80100&0xffff)( $31)		;  ldah $18, ((  0x80100+0x8000)>>16)($18)	; 	;		    sll	    $18, 24              , $18;
	and	$30, 3	, $17	
	bis	$17, 6	, $17	
	sll	$17, 27, $17		
	bis	$18, $17, $16		
	hw_ldq/p	$17, 0($16)		
	zap	$17, 0xfe, $17		
	sll	$17, (16+8), $17
	bis	$30, $17, $30		




	lda	$17, 5	($31)

	sll	$17, 27, $17
	bis	$18, $17, $16
	hw_ldq/p	$17, 0($16)		
	zap	$17, 0xfe, $17		












	sll	$17, 16, $17
	bis	$30, $17, $30		


	lda	$17, 1	($31)
	sll	$17, 27, $17
	bis	$18, $17, $16






	hw_ldq/p	$17, 0($16)		

	zap	$17, 0xfe, $17		
	cmpeq	$17, 0xff, $0
	beq	$0, no_check_iic_dimm

        bis     $31, $31, $5 		 
        bsr     $28, srom_iic_configure	 
	br	$31, merge_dimm0

no_check_iic_dimm:
		lda	$29, 3($31);		lda	$28, 0x2f($31);				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $17, $28;				bsr	$0, minidebugger ;
		lda	$29, 3($31);		lda	$28, 0x2f($31);				bsr	$0, minidebugger ;
	bsr	$29, convert_ppd
merge_dimm0:
		lda	$29, 3($31);		lda	$28, 0x2a($31);				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $2, $28;				bsr	$0, minidebugger ;
		lda	$29, 3($31);		lda	$28, 0x2a($31);				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $8, $28;				bsr	$0, minidebugger ;
		lda	$29, 3($31);		lda	$28, 0x2a($31);				bsr	$0, minidebugger ;

	sll	$2, ((16+8)+(8*1)), $17
	bis	$30, $17, $30		


	lda	$17, 2	($31)
	sll	$17, 27, $17
	bis	$18, $17, $16










	hw_ldq/p	$17, 0($16)		

	zap	$17, 0xfe, $17		
	cmpeq	$17, 0xff, $0
	beq	$0, no_check_iic_dimm_1

        bis     $31, 2, $5                       
        bsr     $28, srom_iic_configure	 
	br	$31, merge_dimm1

no_check_iic_dimm_1:
		lda	$29, 3($31);		lda	$28, 0x2f($31);				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $17, $28;				bsr	$0, minidebugger ;
		lda	$29, 3($31);		lda	$28, 0x2f($31);				bsr	$0, minidebugger ;
	bsr	$29, convert_ppd
merge_dimm1:

		lda	$29, 3($31);		lda	$28, 0x2a($31);				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $2, $28;				bsr	$0, minidebugger ;
		lda	$29, 3($31);		lda	$28, 0x2a($31);				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $8, $28;				bsr	$0, minidebugger ;
		lda	$29, 3($31);		lda	$28, 0x2a($31);				bsr	$0, minidebugger ;












	sll	$2, ((16+8)+(8*2)), $17
	bis	$30, $17, $30		




	lda	$17, 3	($31)
	sll	$17, 27, $17
	bis	$18, $17, $16
	hw_ldq/p	$17, 0($16)		
	zap	$17, 0xfe, $17		
	cmpeq	$17, 0xff, $0
	beq	$0, no_check_iic_dimm_2

check_iic_dimm_2:
        bis     $31, 4, $5                       
        bsr     $28, srom_iic_configure	 
	br	$31, merge_dimm2

no_check_iic_dimm_2:
		lda	$29, 3($31);		lda	$28, 0x2f($31);				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $17, $28;				bsr	$0, minidebugger ;
		lda	$29, 3($31);		lda	$28, 0x2f($31);				bsr	$0, minidebugger ;
	bsr	$29, convert_ppd
merge_dimm2:

		lda	$29, 3($31);		lda	$28, 0x2a($31);				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $2, $28;				bsr	$0, minidebugger ;
		lda	$29, 3($31);		lda	$28, 0x2a($31);				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $8, $28;				bsr	$0, minidebugger ;
		lda	$29, 3($31);		lda	$28, 0x2a($31);				bsr	$0, minidebugger ;




	sll	$2, ((16+8)+(8*3)), $17

	bis	$30, $17, $30		


	lda	$17, 4	($31)
	sll	$17, 27, $17
	bis	$18, $17, $16
	hw_ldq/p	$17, 0($16)		
	zap	$17, 0xfe, $17		
	cmpeq	$17, 0xff, $0
	beq	$0, no_check_iic_dimm_3

        bis     $31, 6, $5                       
        bsr     $28, srom_iic_configure	 
	br	$31, merge_dimm3

no_check_iic_dimm_3:
		lda	$29, 3($31);		lda	$28, 0x2f($31);				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $17, $28;				bsr	$0, minidebugger ;
		lda	$29, 3($31);		lda	$28, 0x2f($31);				bsr	$0, minidebugger ;
	bsr	$29, convert_ppd
merge_dimm3:

		lda	$29, 3($31);		lda	$28, 0x2a($31);				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $2, $28;				bsr	$0, minidebugger ;
		lda	$29, 3($31);		lda	$28, 0x2a($31);				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $8, $28;				bsr	$0, minidebugger ;
		lda	$29, 3($31);		lda	$28, 0x2a($31);				bsr	$0, minidebugger ;












	sll	$2, ((16+8)+(8*4)), $17
	bis	$30, $17, $30		

check_iic_dimm_done:
	bis	$31, 1, $17
	sll	$17, (0+16)	, $17
	xor	$30, $17, $30		
dimms_sized:







		lda $9, ( ((( 0x24)|(1))>>32)&0xffff)( $31)		;  ldah $9, (( ((( 0x24)|(1))>>32)+0x8000)>>16)($9)	; 	; 	sll	$9, 32, $9			; 	lda $8, ( (( 0x24)|(1))&0xffff)( $31)		;  ldah $8, (( (( 0x24)|(1))+0x8000)>>16)($8)	; 	; 	zap	$8, 0xf0, $8			; 	bis	$8, $9, $8			; 	bsr	$26, SyncronizeCPUs		;


	srl	$30, 3, $1
	blbc	$1, SkipInitArrays
InitArrays:
	srl	$30, 1, $1	 
	and	$30, $1, $1			 
	srl     $1, 4, $1         
        srl     $30, (1+16)	, $7        
	and	$7, $1, $1
	blbs	$1, Case1
Case0:
        srl     $30, (1+16)	+1, $1        
	blbs	$1, Case1
	lda $17, ( 0x00002f63&0xffff)( $31)		;  ldah $17, (( 0x00002f63+0x8000)>>16)($17)	; 
	sll	$17, 32, $17
	lda $16, ( 0x14000130&0xffff)( $31)		;  ldah $16, (( 0x14000130+0x8000)>>16)($16)	; 
	bis	$17, $16, $23
	lda 	$17, 0x22($31)
	br	$31, dep_STR1
Case1:
	sll	$1, 63, $1
	bis	$1, $14, $14
	lda $17, ( 0x00002f63&0xffff)( $31)		;  ldah $17, (( 0x00002f63+0x8000)>>16)($17)	; 
	sll	$17, 32, $17
	lda $16, ( 0x14000234&0xffff)( $31)		;  ldah $16, (( 0x14000234+0x8000)>>16)($16)	; 
	bis	$17, $16, $23
	lda 	$17, 0x24($31)
	br	$31, dep_STR1
dep_STR1:
		lda	$29, 3($31);		lda	$28, 0x2a($31);				bsr	$0, minidebugger ;
	srl	$14, 32, $18
		lda	$29, 2($31);		bis	$31, $18, $28;				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $14, $28;				bsr	$0, minidebugger ;
		lda	$29, 3($31);		lda	$28, 0x2a($31);				bsr	$0, minidebugger ;
	and	$14, 1, $16		 
	bis	$17, $16, $17		 
	xor	$16, 1, $16
	bis	$31, $16, $18
	sll	$18, 4, $18
	addq	$18, $16, $18
	sll	$18, 32, $18
	addq	$18, $23, $23
	s4addq	$16, $17, $17
	sll	$17, 8, $16
	bis	$17, $16, $17
	sll	$17, 16, $16
	bis	$17, $16, $17
	sll	$17, 32, $16
	bis	$17, $16, $17
	sll	$17, 32, $16
	bis	$17, $16, $17
	    lda $16, (  0x801B0&0xffff)( $31)		;  ldah $16, ((  0x801B0+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
	lda	$16, 0x840($16)
	bsr	$26, srom_wrtest	









	lda $16, ( (20*24)&0xffff)( $31)		;  ldah $16, (( (20*24)+0x8000)>>16)($16)	; 	
	bsr	$27, wait_n_cycles 	



	
refresh_on:
	bis	$23, $31, $17
	    lda $16, (  0x801A0&0xffff)( $31)		;  ldah $16, ((  0x801A0+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
	lda	$16, 0x040($16)
	bsr	$26, srom_wrtest	









	lda $16, ( (4096*10*24)&0xffff)( $31)		;  ldah $16, (( (4096*10*24)+0x8000)>>16)($16)	; 
	bsr	$27, wait_n_cycles 	



	
refresh_off:
	lda $16, ( 0x00000000&0xffff)( $31)		;  ldah $16, (( 0x00000000+0x8000)>>16)($16)	; 
	sll	$16, 32, $16
	lda $16, ( 0x3F000000&0xffff)( $16)		;  ldah $16, (( 0x3F000000+0x8000)>>16)($16)	; 
	bic	$23, $16, $17
	    lda $16, (  0x801A0&0xffff)( $31)		;  ldah $16, ((  0x801A0+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
	lda	$16, 0x040($16)
	bsr	$26, srom_wrtest	


	bis	$31, $31, $17
	srl	$30, ((16+8)+(8*1)), $1	
	and	$1, 0x7, $1
	beq	$1, dep_MPR0
	lda	$17, 0x29($31)
	srl	$14, 63, $16
	sll	$16, 4, $16
	bis	$16, $17, $17
	and	$14, 1, $16		 
	xor	$16, 1, $16
	addl	$17, $16, $17		 
dep_MPR0:
	    lda $16, (  0x801A0&0xffff)( $31)		;  ldah $16, ((  0x801A0+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
	lda	$16, 0x400($16)
	bsr	$26, srom_wrtest	

	bis	$31, $31, $17
	srl	$30, ((16+8)+(8*2)), $1	
	and	$1, 0x7, $1
	beq	$1, dep_MPR1
	lda	$17, 0x29($31)
	srl	$14, 63, $16
	sll	$16, 4, $16
	bis	$16, $17, $17
	and	$14, 1, $16		 
	xor	$16, 1, $16
	addl	$17, $16, $17		 
dep_MPR1:



	    lda $16, (  0x801A0&0xffff)( $31)		;  ldah $16, ((  0x801A0+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
	lda	$16, 0x440($16)
	bsr	$26, srom_wrtest	

	bis	$31, $31, $17
	srl	$30, ((16+8)+(8*3)), $1	
	and	$1, 0x7, $1
	beq	$1, dep_MPR2
	lda	$17, 0x29($31)
	srl	$14, 63, $16
	sll	$16, 4, $16
	bis	$16, $17, $17
	and	$14, 1, $16		 
	xor	$16, 1, $16
	addl	$17, $16, $17		 
dep_MPR2:
	    lda $16, (  0x801A0&0xffff)( $31)		;  ldah $16, ((  0x801A0+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
	lda	$16, 0x480($16)
	bsr	$26, srom_wrtest	

	bis	$31, $31, $17
	srl	$30, ((16+8)+(8*4)), $1	
	and	$1, 0x7, $1
	beq	$1, dep_MPR3
	lda	$17, 0x29($31)
	srl	$14, 63, $16
	sll	$16, 4, $16
	bis	$16, $17, $17
	and	$14, 1, $16		 
	xor	$16, 1, $16
	addl	$17, $16, $17		 
dep_MPR3:
	    lda $16, (  0x801A0&0xffff)( $31)		;  ldah $16, ((  0x801A0+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
	lda	$16, 0x4C0($16)
	bsr	$26, srom_wrtest	

	
refresh_on2:
	bis	$31, $23, $17
	    lda $16, (  0x801A0&0xffff)( $31)		;  ldah $16, ((  0x801A0+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
	lda	$16, 0x040($16)
	bsr	$26, srom_wrtest	

Sort_dimm_sizes:
	bis	$31, 0, $5		 
        bis     $31, 1, $4
        insbl   $4, 1, $4		 
	bis     $4, $5, $5		 
	bis     $31, 2, $4		 
	insbl   $4, 2, $4		 
	bis     $4, $5, $5		 
	bis     $31, 3, $4		 
	insbl   $4, 3, $4		 
	bis     $4, $5, $5		 

	extbl   $30, 4, $1		 
	and     $1, 7, $1		 
	bis     $31, 0, $4		 
	extbl   $30, 5, $2		 
	and     $2, 7, $2		 
	cmpult  $1, $2, $3		 
 
	cmovlbs $3, 1, $4		 
	cmovlbs $3, $2, $1		 
	extbl   $30, 6, $2		 
	and     $2, 7, $2		 
	cmpult  $1, $2, $3		 
 
	cmovlbs $3, 2, $4		 
	cmovlbs $3, $2, $1		 
	extbl   $30, 7, $2		 
	and     $2, 7, $2		 
	cmpult  $1, $2, $3		 
 
	cmovlbs $3, 3, $4		 
	cmovlbs $3, $2, $1		 
	mskbl   $5, $4, $5		 
	bis     $4, $5, $5		 
	extbl   $5, 1, $4		 
	addq    $4, 4, $3		 
	bis     $31, 1, $4		 
	extbl   $30, $3, $1		 
	and     $1, 7, $1		 
	extbl   $5, 2, $3		 
	addq    $3, 4, $3		 
	extbl   $30, $3, $2		 
	and     $2, 7, $2		 
	cmpult  $1, $2, $3		 
 
	cmovlbs $3, 2, $4		 
	cmovlbs $3, $2, $1		 
	extbl   $5, 3, $3		 
	addq    $3, 4, $3		 
	extbl   $30, $3, $2		 
	and     $2, 7, $2		 
 
	cmpult  $1, $2, $3		 
	cmovlbs $3, 3, $4		 
	cmovlbs $3, $2, $1		 
	extbl   $5, 1, $1		 
	extbl   $5, $4, $2		 
	mskbl   $5, $4, $5		 
	mskbl   $5, 1, $5		 
	insbl   $1, $4, $1		 
	insbl   $2, 1, $2		 
	bis     $2, $5, $5		 
	bis     $1, $5, $5		 
	extbl   $5, 2, $4		 
	addq    $4, 4, $3		 
	bis     $31, 2, $4		 
	extbl   $30, $3, $1		 
	and     $1, 7, $1		 
	extbl   $5, 3, $3		 
	addq    $3, 4, $3		 
	extbl   $30, $3, $2		 
	and     $2, 7, $2		 
	cmpult  $1, $2, $3		 
 
	cmovlbs $3, 3, $4		 
	extbl   $5, 2, $1		 
	extbl   $5, $4, $2		 
	mskbl   $5, $4, $5		 
	mskbl   $5, 2, $5		 
	insbl   $1, $4, $1		 
	insbl   $2, 2, $2		 
	bis     $2, $5, $5		 
	bis     $1, $5, $5		 

	bis	$31, $31, $23		
	bis	$31, $31, $10		
	bis	$31, 4, $4
	and	$14, 1, $14		 
	xor	$14, 1, $14
SetupArray:
	mb
	bis	$31, $31, $17
	and	$5, 7, $2
	addq	$2, 4, $2
	extbl   $30, $2, $3		 
	and	$3, 7, $1		 
	beq	$1, dep_AARn

	subl	$1, $14, $1
	sll	$1, 12, $17		
	srl	$3, 7, $2		 
	sll	$2, 8, $2
	bis	$17, $2, $17
	srl	$3, 6, $2		 
	and	$2, 1, $2		 
	bis     $17, $2, $17
	srl     $3, 2, $2                
	and	$2, 0xc, $2		 
	bis     $17, $2, $17
	bis	$31, 1, $2
	addq	$1, 23, $3
	sll	$2, $3, $11		
	bis	$17, $10, $17
	addq	$10, $11, $10		
	addq	$23, $11, $23		
dep_AARn:
	    lda $16, (  0x801A0&0xffff)( $31)		;  ldah $16, ((  0x801A0+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
	lda	$16, 0x100($16)
	and	$5, 7, $2
	mulq	$2, 0x40, $2
	addq	$16, $2, $16
	bsr	$26, srom_wrtest	
	subq	$4, 1, $4		
	srl	$5, 8, $5		
	bne	$4, SetupArray












	lda $16, ( (4096*10*24)&0xffff)( $31)		;  ldah $16, (( (4096*10*24)+0x8000)>>16)($16)	; 
	bsr	$27, wait_n_cycles 	


SkipInitArrays:
# 2421 "srom.s"


		bis	$31, 0x20, $2	; 		bsr	$29, WriteLEDS	; 	
	mb






DetectSpeed:






	ldah	$16, 8($31)
	bsr	$27, wait_n_cycles




	lda	$12, 2($31)	
SpeedLoop:
	subq	$12, 1, $12		
		lda $9, ( ((( 0x28)|(1))>>32)&0xffff)( $31)		;  ldah $9, (( ((( 0x28)|(1))>>32)+0x8000)>>16)($9)	; 	; 	sll	$9, 32, $9			; 	lda $8, ( (( 0x28)|(1))&0xffff)( $31)		;  ldah $8, (( (( 0x28)|(1))+0x8000)>>16)($8)	; 	; 	zap	$8, 0xf0, $8			; 	bis	$8, $9, $8			; 	bsr	$26, SyncronizeCPUs		; 

	and	$30, 3	, $2	
	cmpeq	$2, $12, $2		
	mb
	beq	$2, SkipGetSpeed	
	mb

	bsr 	$28, GetCPUSpeed	
	bis	$0, $0, $17		

SkipGetSpeed:
		lda $9, ( ((( 0x2C)|(1))>>32)&0xffff)( $31)		;  ldah $9, (( ((( 0x2C)|(1))>>32)+0x8000)>>16)($9)	; 	; 	sll	$9, 32, $9			; 	lda $8, ( (( 0x2C)|(1))&0xffff)( $31)		;  ldah $8, (( (( 0x2C)|(1))+0x8000)>>16)($8)	; 	; 	zap	$8, 0xf0, $8			; 	bis	$8, $9, $8			; 	bsr	$26, SyncronizeCPUs		; 
	mb
	bne	$12, SpeedLoop		


	lda $16, ( 9600&0xffff)( $31)		;  ldah $16, (( 9600+0x8000)>>16)($16)	; 		
	bsr	$26, nintdivide		
		lda	$29, 5($31);		bis	$31, $0, $28;				bsr	$0, minidebugger ;			

	
		lda	$29, 1($31);		lda $28, (   	( (0x34 << 24) | (0x36 << 16) | (0x32 << 8) | (0x50 << 0) )&0xffff)( $31)		;  ldah $28, ((   	( (0x34 << 24) | (0x36 << 16) | (0x32 << 8) | (0x50 << 0) )+0x8000)>>16)($28)	; ; sll  $28, 32, $28; lda $28, (  	( (0x44 << 24) | (0x0a << 16) | (0x0d << 8) | (0x0d << 0) )&0xffff)( $28)		;  ldah $28, ((  	( (0x44 << 24) | (0x0a << 16) | (0x0d << 8) | (0x0d << 0) )+0x8000)>>16)($28)	; ;;			bsr	$0, minidebugger ;

PrintVersionID:				
		lda	$29, 1($31);		lda $28, ( (	( ( (0x58000000>>(8*3)) << 24) | ( 0x2e << 16) | ( 0x2e << 8) | (0x2e << 0) ))&0xffff)( $31)		;  ldah $28, (( (	( ( (0x58000000>>(8*3)) << 24) | ( 0x2e << 16) | ( 0x2e << 8) | (0x2e << 0) ))+0x8000)>>16)($28)	; ;			bsr	$0, minidebugger ;
	lda $0, ( 0x00000901&0xffff)( $31)		;  ldah $0, (( 0x00000901+0x8000)>>16)($0)	; 
	bis	$31, $31, $16







	bis	$16, 4, $16
















	sll	$16, 16, $16
	bis	$0, $16, $0
		lda	$29, 2($31);		bis	$31, $0, $28;				bsr	$0, minidebugger ;


		bis	$31, 0x01, $2	; 		bsr	$29, WriteLEDS	; 	




		lda	$29, 3($31);		lda	$28, 0x2e($31);				bsr	$0, minidebugger ;
	srl	$30, 32, $7
		lda	$29, 2($31);		bis	$31, $7, $28;				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $30, $28;				bsr	$0, minidebugger ;










        srl     $30, 3, $1
        blbc    $1, SkipInitCypress
	bsr	$26, InitCypress	

SkipInitCypress:




	bis	$17, $17, $16		
	lda $3, ( 0xe8d4a510&0xffff)( $31)		;  ldah $3, (( 0xe8d4a510+0x8000)>>16)($3)	; 	
	zap	$3, 0xf0, $17		
	sll	$17, 8, $17		
	bsr	$26, nintdivide		






	bis $0, $0, $22			
 		bis	$31, 0x02, $2	; 		bsr	$29, WriteLEDS	; 	

	
		lda	$29, 3($31);		lda	$28, 0x2e($31);				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $22, $28;				bsr	$0, minidebugger ;

		bis	$31, $23, $16		; 		lda $9, ( (((  0x30)|(2))>>32)&0xffff)( $31)		;  ldah $9, (( (((  0x30)|(2))>>32)+0x8000)>>16)($9)	; 	; 	sll	$9, 32, $9			; 	lda $8, ( ((  0x30)|(2))&0xffff)( $31)		;  ldah $8, (( ((  0x30)|(2))+0x8000)>>16)($8)	; 	; 	zap	$8, 0xf0, $8			; 	bis	$8, $9, $8			; 	bsr	$26, SyncronizeCPUs		;	; 	bis	$31, $16, $23		;
InitBcache:
	mb					 
	beq	$23, NoMemory
	srl	$30, (3+(16+8)), $1
	and	$1, 0xf, $7		
	xor	$7, 0xc, $7		



        	bis	$31, 0x03, $2	; 		bsr	$29, WriteLEDS	; 	                












        subq    $7, 1, $1
        bis     $31, 1, $7
        sll     $7, $1, $7              


BCache1MB:



        cmpeq   $7, 1, $1
        blbc    $1, BCache2MB
	lda $2, ( 			((((		0)>>(	0)) & 1) * (0x1)) | 		((((		0)>>(	1)) & 1) * (0x2)) | 		((((		0)>>(	2)) & 1) * (0x4)) | 		((((		0)>>(	3)) & 1) * (0x8))&0xffff)( $31)		;  ldah $2, (( 			((((		0)>>(	0)) & 1) * (0x1)) | 		((((		0)>>(	1)) & 1) * (0x2)) | 		((((		0)>>(	2)) & 1) * (0x4)) | 		((((		0)>>(	3)) & 1) * (0x8))+0x8000)>>16)($2)	; 
	sll	$2, 32, $2

	lda $14, ( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		0)>>(	0)) & 1) * (0x20000001)) | 		((((		0)>>(	1)) & 1) * (0x10000800)) | 		((((		0)>>(	2)) & 1) * (0x08000400)) | 		((((		0)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))&0xffff)( $31)		;  ldah $14, (( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		0)>>(	0)) & 1) * (0x20000001)) | 		((((		0)>>(	1)) & 1) * (0x10000800)) | 		((((		0)>>(	2)) & 1) * (0x08000400)) | 		((((		0)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))+0x8000)>>16)($14)	; 
	zap	$14, 0xf0, $14
	bis	$14, $2, $14

        br      $31, EnableInitMode

BCache2MB:



        cmpeq   $7, 2, $1
        blbc    $1, BCache4MB
	lda $2, ( 			((((		1)>>(	0)) & 1) * (0x1)) | 		((((		1)>>(	1)) & 1) * (0x2)) | 		((((		1)>>(	2)) & 1) * (0x4)) | 		((((		1)>>(	3)) & 1) * (0x8))&0xffff)( $31)		;  ldah $2, (( 			((((		1)>>(	0)) & 1) * (0x1)) | 		((((		1)>>(	1)) & 1) * (0x2)) | 		((((		1)>>(	2)) & 1) * (0x4)) | 		((((		1)>>(	3)) & 1) * (0x8))+0x8000)>>16)($2)	; 
	sll	$2, 32, $2

	lda $14, ( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		1)>>(	0)) & 1) * (0x20000001)) | 		((((		1)>>(	1)) & 1) * (0x10000800)) | 		((((		1)>>(	2)) & 1) * (0x08000400)) | 		((((		1)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))&0xffff)( $31)		;  ldah $14, (( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		1)>>(	0)) & 1) * (0x20000001)) | 		((((		1)>>(	1)) & 1) * (0x10000800)) | 		((((		1)>>(	2)) & 1) * (0x08000400)) | 		((((		1)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))+0x8000)>>16)($14)	; 
	zap	$14, 0xf0, $14
	bis	$14, $2, $14

        br      $31, EnableInitMode

BCache4MB:



        cmpeq   $7, 4, $1
        blbc    $1, BCache8MB
	lda $2, ( 			((((		3)>>(	0)) & 1) * (0x1)) | 		((((		3)>>(	1)) & 1) * (0x2)) | 		((((		3)>>(	2)) & 1) * (0x4)) | 		((((		3)>>(	3)) & 1) * (0x8))&0xffff)( $31)		;  ldah $2, (( 			((((		3)>>(	0)) & 1) * (0x1)) | 		((((		3)>>(	1)) & 1) * (0x2)) | 		((((		3)>>(	2)) & 1) * (0x4)) | 		((((		3)>>(	3)) & 1) * (0x8))+0x8000)>>16)($2)	; 
	sll	$2, 32, $2

	lda $14, ( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		3)>>(	0)) & 1) * (0x20000001)) | 		((((		3)>>(	1)) & 1) * (0x10000800)) | 		((((		3)>>(	2)) & 1) * (0x08000400)) | 		((((		3)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))&0xffff)( $31)		;  ldah $14, (( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		3)>>(	0)) & 1) * (0x20000001)) | 		((((		3)>>(	1)) & 1) * (0x10000800)) | 		((((		3)>>(	2)) & 1) * (0x08000400)) | 		((((		3)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))+0x8000)>>16)($14)	; 
	zap	$14, 0xf0, $14
	bis	$14, $2, $14

        br      $31, EnableInitMode

BCache8MB:



        cmpeq   $7, 8, $1
        blbc    $1, BCache16MB
	lda $2, ( 			((((		7)>>(	0)) & 1) * (0x1)) | 		((((		7)>>(	1)) & 1) * (0x2)) | 		((((		7)>>(	2)) & 1) * (0x4)) | 		((((		7)>>(	3)) & 1) * (0x8))&0xffff)( $31)		;  ldah $2, (( 			((((		7)>>(	0)) & 1) * (0x1)) | 		((((		7)>>(	1)) & 1) * (0x2)) | 		((((		7)>>(	2)) & 1) * (0x4)) | 		((((		7)>>(	3)) & 1) * (0x8))+0x8000)>>16)($2)	; 
	sll	$2, 32, $2

	lda $14, ( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		7)>>(	0)) & 1) * (0x20000001)) | 		((((		7)>>(	1)) & 1) * (0x10000800)) | 		((((		7)>>(	2)) & 1) * (0x08000400)) | 		((((		7)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))&0xffff)( $31)		;  ldah $14, (( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		7)>>(	0)) & 1) * (0x20000001)) | 		((((		7)>>(	1)) & 1) * (0x10000800)) | 		((((		7)>>(	2)) & 1) * (0x08000400)) | 		((((		7)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))+0x8000)>>16)($14)	; 
	zap	$14, 0xf0, $14
	bis	$14, $2, $14

        br      $31, EnableInitMode


BCache16MB:



        cmpeq   $7, 16, $1
        blbc    $1, BCache0MB
	lda $2, ( 			((((		15)>>(	0)) & 1) * (0x1)) | 		((((		15)>>(	1)) & 1) * (0x2)) | 		((((		15)>>(	2)) & 1) * (0x4)) | 		((((		15)>>(	3)) & 1) * (0x8))&0xffff)( $31)		;  ldah $2, (( 			((((		15)>>(	0)) & 1) * (0x1)) | 		((((		15)>>(	1)) & 1) * (0x2)) | 		((((		15)>>(	2)) & 1) * (0x4)) | 		((((		15)>>(	3)) & 1) * (0x8))+0x8000)>>16)($2)	; 
	sll	$2, 32, $2

	lda $14, ( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		15)>>(	0)) & 1) * (0x20000001)) | 		((((		15)>>(	1)) & 1) * (0x10000800)) | 		((((		15)>>(	2)) & 1) * (0x08000400)) | 		((((		15)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))&0xffff)( $31)		;  ldah $14, (( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		15)>>(	0)) & 1) * (0x20000001)) | 		((((		15)>>(	1)) & 1) * (0x10000800)) | 		((((		15)>>(	2)) & 1) * (0x08000400)) | 		((((		15)>>(	3)) & 1) * (0x04000200))			| 			((((		1)>>(	0)) & 1) * (0x00021000)) | 		((((		1)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	0)>>(	0)) & 1) * (0x00010000)) | 		((((	0)>>(	1)) & 1) * (0x00000040)) | 		((((	0)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))+0x8000)>>16)($14)	; 
	zap	$14, 0xf0, $14
	bis	$14, $2, $14

        br      $31, EnableInitMode

BCache0MB:


















        lda $2, ( 			((((		0)>>(	0)) & 1) * (0x1)) | 		((((		0)>>(	1)) & 1) * (0x2)) | 		((((		0)>>(	2)) & 1) * (0x4)) | 		((((		0)>>(	3)) & 1) * (0x8))&0xffff)( $31)		;  ldah $2, (( 			((((		0)>>(	0)) & 1) * (0x1)) | 		((((		0)>>(	1)) & 1) * (0x2)) | 		((((		0)>>(	2)) & 1) * (0x4)) | 		((((		0)>>(	3)) & 1) * (0x8))+0x8000)>>16)($2)	; 
        sll     $2, 32, $2

        lda $14, ( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		0)>>(	0)) & 1) * (0x20000001)) | 		((((		0)>>(	1)) & 1) * (0x10000800)) | 		((((		0)>>(	2)) & 1) * (0x08000400)) | 		((((		0)>>(	3)) & 1) * (0x04000200))			| 			((((		3)>>(	0)) & 1) * (0x00021000)) | 		((((		3)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	6)>>(	0)) & 1) * (0x00010000)) | 		((((	6)>>(	1)) & 1) * (0x00000040)) | 		((((	6)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))&0xffff)( $31)		;  ldah $14, (( 		((((		0)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		0)>>(	0)) & 1) * (0x20000001)) | 		((((		0)>>(	1)) & 1) * (0x10000800)) | 		((((		0)>>(	2)) & 1) * (0x08000400)) | 		((((		0)>>(	3)) & 1) * (0x04000200))			| 			((((		3)>>(	0)) & 1) * (0x00021000)) | 		((((		3)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	6)>>(	0)) & 1) * (0x00010000)) | 		((((	6)>>(	1)) & 1) * (0x00000040)) | 		((((	6)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))+0x8000)>>16)($14)	; 
        zap     $14, 0xf0, $14
        bis     $14, $2, $14

        lda $2, ( 0x001C0000&0xffff)( $31)		;  ldah $2, (( 0x001C0000+0x8000)>>16)($2)	; 
        bic     $14, $2, $14

        bis	$31, 16, $7               
        br      $31, PrintChain2



EnableInitMode:
        lda $2, ( 0x001C0000&0xffff)( $31)		;  ldah $2, (( 0x001C0000+0x8000)>>16)($2)	; 
        bic     $14, $2, $14



















	lda $2, ( 		((((		0xf)>>(	0)) & 1) * (0x1)) | 		((((		0xf)>>(	1)) & 1) * (0x2)) | 		((((		0xf)>>(	2)) & 1) * (0x4)) | 		((((		0xf)>>(	3)) & 1) * (0x8))&0xffff)( $31)		;  ldah $2, (( 		((((		0xf)>>(	0)) & 1) * (0x1)) | 		((((		0xf)>>(	1)) & 1) * (0x2)) | 		((((		0xf)>>(	2)) & 1) * (0x4)) | 		((((		0xf)>>(	3)) & 1) * (0x8))+0x8000)>>16)($2)	; 
	sll	$2, 32, $2

	lda $0, ( 		((((		0xf)>>(	0)) & 1) * (0x20000001)) | 		((((		0xf)>>(	1)) & 1) * (0x10000800)) | 		((((		0xf)>>(	2)) & 1) * (0x08000400)) | 		((((		0xf)>>(	3)) & 1) * (0x04000200))&0xffff)( $31)		;  ldah $0, (( 		((((		0xf)>>(	0)) & 1) * (0x20000001)) | 		((((		0xf)>>(	1)) & 1) * (0x10000800)) | 		((((		0xf)>>(	2)) & 1) * (0x08000400)) | 		((((		0xf)>>(	3)) & 1) * (0x04000200))+0x8000)>>16)($0)	; 
	bis	$0, $2, $0		
	and	$0, $14, $0		

	lda $2, ( 			((((		0)>>(	0)) & 1) * (0x1)) | 		((((		0)>>(	1)) & 1) * (0x2)) | 		((((		0)>>(	2)) & 1) * (0x4)) | 		((((		0)>>(	3)) & 1) * (0x8))&0xffff)( $31)		;  ldah $2, (( 			((((		0)>>(	0)) & 1) * (0x1)) | 		((((		0)>>(	1)) & 1) * (0x2)) | 		((((		0)>>(	2)) & 1) * (0x4)) | 		((((		0)>>(	3)) & 1) * (0x8))+0x8000)>>16)($2)	; 
	sll	$2, 32, $2

	lda $14, ( 		((((		1)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		0)>>(	0)) & 1) * (0x20000001)) | 		((((		0)>>(	1)) & 1) * (0x10000800)) | 		((((		0)>>(	2)) & 1) * (0x08000400)) | 		((((		0)>>(	3)) & 1) * (0x04000200))			| 			((((		3)>>(	0)) & 1) * (0x00021000)) | 		((((		3)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	6)>>(	0)) & 1) * (0x00010000)) | 		((((	6)>>(	1)) & 1) * (0x00000040)) | 		((((	6)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))&0xffff)( $31)		;  ldah $14, (( 		((((		1)>>(	0)) & 1) * (0x439ce000))		| 		((((		0)>>(	0)) & 1) * (0x80000002))		| 			((((		0)>>(	0)) & 1) * (0x20000001)) | 		((((		0)>>(	1)) & 1) * (0x10000800)) | 		((((		0)>>(	2)) & 1) * (0x08000400)) | 		((((		0)>>(	3)) & 1) * (0x04000200))			| 			((((		3)>>(	0)) & 1) * (0x00021000)) | 		((((		3)>>(	1)) & 1) * (0x00200000))	| 		((((		0)>>(	0)) & 1) * (0x00400000))		| 			((((	6)>>(	0)) & 1) * (0x00010000)) | 		((((	6)>>(	1)) & 1) * (0x00000040)) | 		((((	6)>>(	2)) & 1) * (0x00000080))	| 		((((		0)>>(	0)) & 1) * (0x00000100))	| 			((((		0)>>(	0)) & 1) * (0x00000020)) | 		((((		0)>>(	1)) & 1) * (0x00000010)) | 		((((		0)>>(	2)) & 1) * (0x00000008)) | 		((((		0)>>(	3)) & 1) * (0x00000004))+0x8000)>>16)($14)	; 
	zap	$14, 0xf0, $14
	bis	$14, $2, $14
	bis	$14, $0, $14		

PrintChain2:
		lda	$29, 3($31);		lda	$28, 0x2e($31);				bsr	$0, minidebugger ;
	srl	$14, 32, $17
		lda	$29, 7($31);		bis	$31, $17, $28;				bsr	$0, minidebugger ;
	bis	$14, $31, $17
		lda	$29, 2($31);		bis	$31, $17, $28;				bsr	$0, minidebugger ;
	sll	$14, 16, $21		 


        	bis	$31, 0x05, $2	; 		bsr	$29, WriteLEDS	; 	


	addq	$31, 6, $0		
	mb				

	br	$31, BCshf2
	.align 6
BCshf2:	hw_mtpr	$14, (( 0x2B << 8) | 0x40)		
	subq	$0, 1, $0		
	beq	$0, BCend2		
        srl	$14, 6, $14		

	br	$31, BCshf2		
BCend2:	hw_mtpr	$31, (( 0x06 << 8) | 0x0) + 16	
	addq	$31, $31, $0		
	addq	$31, $31, $14		

	hw_mtpr	$31, (( 0x06 << 8) | 0x0) + 16	
	beq	$31, BCnxt2		
	br	$31, .-4		
	addq	$31, $31, $14		
BCnxt2:
	mb				


SkipInitBcache:
		lda	$29, 3($31);		lda	$28, 0x2e($31);				bsr	$0, minidebugger ;
		lda	$29, 7($31);		bis	$31, $7, $28;				bsr	$0, minidebugger ;
		lda	$29, 3($31);		lda	$28, 0x2e($31);				bsr	$0, minidebugger ;
	ldah	$0, 0x8000($31)		
	sll	$0, 16, $0		
	sll	$7, (20), $1		
	bis	$0, $1, $0

	br	$31, sweep_bcache1
	.align 6
sweep_bcache1:
	subq	$0, 64, $0
	whint	$0
	mb				
        stq     $31, 0($0)
        stq     $31, 8($0)
        stq     $31, 16($0)
        stq     $31, 24($0)

        stq     $31, 32($0)
        stq     $31, 40($0)
        stq     $31, 48($0)
        stq     $31, 56($0)
	zap	$0, 0xf0, $1
	srl	$1, 4, $1
	mb
	ecb	$0
	bne	$1, sweep_bcache1
	mb				

	
sweep_dcache1:
	ldah	$0, 0x8000($31)		
	sll	$0, 16, $0		
	sll	$7, (20), $1		
	bis	$0, $1, $0
	

	br	$31, sweep_dcache2
	.align 6
sweep_dcache2:
	subq	$0, 64, $0
	ecb	$0
	zap	$0, 0xf0, $1
	srl	$1, 4, $1
	bne	$1, sweep_dcache2
	mb				

























	srl	$30, 3, $1
	blbc	$1, SkipInit_LCD
	bsr	$7, srom_init_lcd
	mb

	bis	$31, 0x43, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x4f, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x4d, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x50, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x41, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x51, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x20, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x20, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
# 2903 "srom.s"

SkipInit_LCD:











	lda	$1,0x3($31)	
	and	$1, 3, $1		
	hw_mtpr 	$1, (( 0x29 << 8) | 0x40)		
















	srl	$30, 3, $6
	beq	$23, Memorysweeped
	bis	$23, $31, $19		
	sll	$0, 16, $0		
	ldah	$0, 0x8000($31)		
	sll	$0, 16, $18		
	blbc	$6, SkipSweepMemory

	bis	$31, 0xc0, $16
	bis	$31, 0, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x7c, $7
	bis	$31, 0x2f, $16
	sll	$16, 8, $16
	bis	$7, $16, $7
	bis	$31, 0x2d, $16
	sll	$16, 16, $16
	bis	$7, $16, $7
	bis	$31, 0x5c, $16
	sll	$16, 24, $16
	bis	$7, $16, $7
	bis	$31, 0x7c, $16
	sll	$16, 32, $16
	bis	$7, $16, $7
	bis	$31, 0x2f, $16
	sll	$16, 40, $16
	bis	$7, $16, $7
	bis	$31, 0x2d, $16
	sll	$16, 48, $16
	bis	$7, $16, $7
	bis	$31, 0x5c, $16
	sll	$16, 56, $16
	bis	$7, $16, $7
	and	$7, 0xff, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	and	$7, 0xff, $16
	srl	$7, 8, $7
	sll	$16, 56, $16
        bis     $7, $16, $7
	mb











SweepMemory:
	mb
	subq	$19, 0x40, $19	
	whint	$18
	mb
	stq   	$31, 0x00($18)	
	stq	$31, 0x08($18)	
	stq	$31, 0x10($18)	
	stq	$31, 0x18($18)	
	stq   	$31, 0x20($18)	
	stq	$31, 0x28($18)	
	stq	$31, 0x30($18)	
	stq	$31, 0x38($18)	
	mb
	ecb	$18
	addq	$18, 0x40, $18	
	mb					 
	sll	$19, 39, $5	 
	bne	$5, donot_print

	bis	$31, 0xc0, $16
	bis	$31, 0, $17
        bsr     $26, srom_access_lcd
	mb
	and	$7, 0xff, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	and	$7, 0xff, $16
	srl	$7, 8, $7
	sll	$16, 56, $16
        bis     $7, $16, $7









	mb
donot_print:
	bgt	$19, SweepMemory 
	mb
	br	$31, Memorysweeped
	.align 3
SkipSweepMemory:
	mb
	subq	$19, 0x40, $19	
	whint	$18
	mb
	stq   	$18, 0x00($18)	
	stq	$18, 0x08($18)	
	stq	$18, 0x10($18)	
	stq	$18, 0x18($18)	
	stq   	$18, 0x20($18)	
	stq	$18, 0x28($18)	
	stq	$18, 0x30($18)	
	stq	$18, 0x38($18)	
	mb
	ecb	$18
	mb
	addq	$18, 0x40, $18	
	mb
	bgt	$19, SkipSweepMemory 

Memorysweeped:

 		bis	$31, 0x06, $2	; 		bsr	$29, WriteLEDS	; 	
		bis	$31, $23, $16		; 		lda $9, ( (((  0x30)|(2))>>32)&0xffff)( $31)		;  ldah $9, (( (((  0x30)|(2))>>32)+0x8000)>>16)($9)	; 	; 	sll	$9, 32, $9			; 	lda $8, ( ((  0x30)|(2))&0xffff)( $31)		;  ldah $8, (( ((  0x30)|(2))+0x8000)>>16)($8)	; 	; 	zap	$8, 0xf0, $8			; 	bis	$8, $9, $8			; 	bsr	$26, SyncronizeCPUs		;	; 	bis	$31, $16, $23		;

	bis	$23, $31, $6	
		lda	$29, 3($31);		lda	$28, 0x2e($31);				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $6, $28;				bsr	$0, minidebugger ;











        	lda $9, ( ((( 0x34)|(1))>>32)&0xffff)( $31)		;  ldah $9, (( ((( 0x34)|(1))>>32)+0x8000)>>16)($9)	; 	; 	sll	$9, 32, $9			; 	lda $8, ( (( 0x34)|(1))&0xffff)( $31)		;  ldah $8, (( (( 0x34)|(1))+0x8000)>>16)($8)	; 	; 	zap	$8, 0xf0, $8			; 	bis	$8, $9, $8			; 	bsr	$26, SyncronizeCPUs		;
		bis	$31, 0x14, $2	; 		bsr	$29, WriteLEDS	; 	


            lda $16, (  0x801A0&0xffff)( $31)		;  ldah $16, ((  0x801A0+0x8000)>>16)($16)	; 	;		    sll	    $16, 24              , $16;
        lda     $16, 0x340($16)
        hw_stq/p   $31, 0($16)             
	mb
		lda $9, ( ((( 0x38)|(1))>>32)&0xffff)( $31)		;  ldah $9, (( ((( 0x38)|(1))>>32)+0x8000)>>16)($9)	; 	; 	sll	$9, 32, $9			; 	lda $8, ( (( 0x38)|(1))&0xffff)( $31)		;  ldah $8, (( (( 0x38)|(1))+0x8000)>>16)($8)	; 	; 	zap	$8, 0xf0, $8			; 	bis	$8, $9, $8			; 	bsr	$26, SyncronizeCPUs		; 





















	srl	$30, 3, $1
	blbc	$1, SkipLoadSystemCode



	bis	$31, 0xc0, $16
	bis	$31, 0, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x46, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x69, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x72, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x6d, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x77, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x61, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x72, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x65, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb


	bis	$30, $30, $16		
	bsr	$14, LoadSystemCode








	
		lda	$29, 3($31);		lda	$28, 0x2e($31);				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $25, $28;				bsr	$0, minidebugger ;

 

SkipLoadSystemCode:
OutLEDPORT_17:

		bis	$31, 0x17, $2	; 		bsr	$29, WriteLEDS	; 	








		lda	$29, 3($31);		lda	$28, 0x2e($31);				bsr	$0, minidebugger ;
	mb
































NextLevel:
 

 

		bis	$31, $25, $16		; 		lda $9, ( (((  0x44)|(2))>>32)&0xffff)( $31)		;  ldah $9, (( (((  0x44)|(2))>>32)+0x8000)>>16)($9)	; 	; 	sll	$9, 32, $9			; 	lda $8, ( ((  0x44)|(2))&0xffff)( $31)		;  ldah $8, (( ((  0x44)|(2))+0x8000)>>16)($8)	; 	; 	zap	$8, 0xf0, $8			; 	bis	$8, $9, $8			; 	bsr	$26, SyncronizeCPUs		;	; 	bis	$31, $16, $25		;

	srl	$30, 3, $5
	blbc	$5, jumpPrimary	

	    lda $9, (  0x801A0&0xffff)( $31)		;  ldah $9, ((  0x801A0+0x8000)>>16)($9)	; 	;		    sll	    $9, 24              , $9;	
	lda	$9, 0x080($9)	
	lda	$5, 1($31)		
	sll	$5, 24, $5		
	hw_stq/p	$5, 0($9)		

	mb
	    lda $9, (  0x80130&0xffff)( $31)		;  ldah $9, ((  0x80130+0x8000)>>16)($9)	; 	;		    sll	    $9, 24              , $9; 
        lda     $9, 0x0A00($9)   
        lda     $5, 69($31)              
        hw_stq/p   $5, 0($9)               
        lda     $9, (0x0A40-0x0A00)($9)   
        hw_stq/p   $5, 0($9)               
	mb
	lda     $9, 0x100($31)
        hw_stq/p   $31, 0($9)               
        hw_stq/p   $31, 8($9)               

	mb
jumpPrimary:
breakpt5:
	srl	$30, (3+16)	, $0	
	blbs	$0, skipbreakpt5



		lda	$29, 0($31);		bsr	$0, minidebugger ;		

skipbreakpt5:
        ldah    $0, 0x8000($31)         
        sll     $0, 16, $0              
        ldah    $0, 2($0)               
	br	$31, sweep_dcachefini
	.align 4
sweep_dcachefini:
	subq	$0, 64, $0
	ecb	$0
	zap	$0, 0xf0, $1
	srl	$1, 4, $1
	bne	$1, sweep_dcachefini
	mb				


        mb
	lda	$1, 0x3($31)	

	bis	$1, 0xc0, $1		 

	hw_mtpr 	$1, (( 0x29 << 8) | 0x40)		
	bis	$21, $1, $1		 

	srl	$30, 4, $20	
	and	$20, ((1<<2)-1), $20	

	lda $15, (  0x58000000&0xffff)( $31)		;  ldah $15, ((  0x58000000+0x8000)>>16)($15)	; ; sll  $15, 32, $15; lda $15, (  0x00000901&0xffff)( $15)		;  ldah $15, ((  0x00000901+0x8000)>>16)($15)	; ;
	bis	$31, $31, $16







	bis	$16, 4, $16








	bis	$16, 32, $16










	sll	$16, 16, $16
	bis	$15, $16, $15
	and	$30, 3	, $16	
	bis	$23, $23, $17		
	bis	$22, $22, $18		
	lda $19, ( 0xDECB8001&0xffff)( $31)		;  ldah $19, (( 0xDECB8001+0x8000)>>16)($19)	; 	
	zap	$19, 0xf0, $19		
	lda	$21, 0($31)		
	bis	$25, 1, $27		
	srl	$30, 4, $5	
	bis	$31, $31, $4		 
	and	$5, 3	, $5	
	cmovlbc	$5, 1, $4
	cmpeq	$16, $4, $5
	blbs	$5, lets_go		


        and     $30, 3	, $9   	   
        lda     $5, 0x0A00($31)   
        lda     $4, 0x0A40($31)   
	cmovne	$9, $4, $5		 	
	    lda $4, (  0x80130&0xffff)( $31)		;  ldah $4, ((  0x80130+0x8000)>>16)($4)	; 	;		    sll	    $4, 24              , $4; 
	addq	$4, $5, $5		
	lda     $4, 0x100($31)
	s8addq	$9, $4, $9		
	ldah	$4, 0x8000($31)		
	sll	$4, 16, $4		
	bis	$4, $9, $4

wait_for_srm:
	mb
        hw_ldl/p   $4, 0($5)               
	bis	$31, $31, $31		
	blbs	$4, wait_for_srm	
	mb
        hw_ldl/p   $25, 0($9)               
	bis	$25, 1, $27		
	mb

	blbc	$31, lets_go		


.align 3
lets_go:
        mb
	bis	$31, $31, $31		
        hw_mtpr    $31, (( 0x13 << 8) | 0x10)       
        bne     $31, Parkret_flush               
Parkret_flush:
pvc$huf24$1007:
	bne	$31, 1f			 
1:	hw_rets/jmp	($27)		














SyncronizeCPUs:
	    lda $5, (  0x801A0&0xffff)( $31)		;  ldah $5, ((  0x801A0+0x8000)>>16)($5)	; 	;		    sll	    $5, 24              , $5;	
	lda	$9, 0x080($5)	
	lda	$10, 0x200($5)	
	lda	$11, 0x240($5)	

	srl	$30, 3, $5
	blbc	$5, SyncSecondary	
SyncPrimary:
	hw_stq/p	$16, 0($11)		
	mb
	hw_stq/p	$8, 0($10)		
	mb












	


	and	$30, 3	, $5	
	lda	$6, 1($31)		
	sll	$6, $5, $6		
	sll	$6, 12, $6		
	hw_stq/p	$6, 0($9)		
	mb

	


	srl	$30, 4, $6	
	and	$6, 3	, $5	
	ldah	$11, 100($31)
SyncPrimary0:
	subq	$11, 1, $11
	beq	$11, SyncPrimary_timedout
	hw_ldq/p	$6, 0($9)		
	srl	$6, 8, $6		
	and	$6, ((1<<2)-1), $6	







	cmpeq	$5, $6, $6		
	beq	$6, SyncPrimary0	

	




SyncPrimary_timedout:
	hw_stq/p	$31, 0($10)		
	hw_stq/p	$31, (0x240-0x200)($10)		
	sll	$5, 8, $6		
	hw_stq/p	$6, 0($9)		
	mb

	




	hw_ldq/p	$5, 0($10)		
	hw_ldq/p	$5, 0($11)		

	




	bne	$31, 1f			 
1:	bis	$26, 1, $26		 
	hw_rets/jmp	($26)		


SyncSecondary:
SyncSecondary_loop:
	hw_ldq/p	$6, 0($10)		












	cmplt	$6, $8, $5		
	blbs	$5, SyncSecondary_loop	

SyncSecondar_timedout0:
	hw_ldq/p	$16, (0x240-0x200)($10)		








	



SyncSecondarySign_in:
	and	$30, 3	, $5	
	lda	$6, 1($31)		
	sll	$6, $5, $6		
	sll	$6, 12, $6		
	hw_stq/p	$6, 0($9)		
	mb

	



SyncSecondary0:
	hw_ldq/p	$6, 0($9)		
	srl	$6, 8, $6		
	and	$6, ((1<<2)-1), $6	
	bne	$6, SyncSecondary0	

SyncSecondaryRet:
	bne	$31, 1f			 
1:	bis	$26, 1, $26		 
	hw_rets/jmp	($26)		



























InitCypress:

	lda	$16, 0xF($31)		
	bsr	$29, WriteCY_CMD_REG	

	lda	$16, 0x80($31)		
	bsr	$29, WriteCY_INTA_ROUTE	

	lda	$16, 0x80($31)		
	bsr	$29, WriteCY_INTB_ROUTE	

	lda	$16, 0x80($31)		
	bsr	$29, WriteCY_INTC_ROUTE	

	lda	$16, 0x80($31)		
	bsr	$29, WriteCY_INTD_ROUTE	

	lda	$16, 0x27($31)		
					
					
	bsr	$29, WriteCY_CTRL_REG	

	lda	$16, 0xE0($31)		
	bsr	$29, WriteCY_ERR_CTRL_REG

	lda	$16, 0xF0($31)		
	bsr	$29, WriteCY_TOP_OF_MEM	

	lda	$16, 0x40($31)		
	bsr	$29, WriteCY_ATCTRL_REG1

	lda	$16, 0x80($31)		
	bsr	$29, WriteCY_IDE0_ROUTE	

	lda	$16, 0x80($31)		
	bsr	$29, WriteCY_IDE1_ROUTE	

	lda	$16, 0x70($31)		
	bsr	$29, WriteCY_SA_USB_CTRL

	bne	$31, 1f			 
1:	bis	$26, 1, $26		 
	hw_rets/jmp	($26)		


























wait_n_cycles:

	lda	$1, 1($31)		
	sll	$1, 32, $1		
	rpcc	$3			
time_loop:
	rpcc	$0			
	subl	$0, $3, $0		
	bge 	$0, nowrap		
	addq	$1, $0, $0		
nowrap:
	cmpult	$0, $16, $2		
	bne 	$2, time_loop		

	bne	$31, 1f			 
1:	bis	$27, 1, $27		 
	hw_rets/jmp	($27)		

convert_ppd:
	and	$17, 0x7, $2		
	addq	$2, 3, $2		
	and	$17, 8, $3		
	xor	$3, 8, $4		 
	srl	$3, 3, $3		
	subq	$2, $3, $2		
	sll	$4, 1, $4
	bis	$2, $4, $2		 
	bne	$31, 1f			 
1:	bis	$29, 1, $29		 
	hw_rets/jmp	($29)		







 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
srom_iic_read_byte:
	    lda $6, (  0x801A0&0xffff)( $31)		;  ldah $6, ((  0x801A0+0x8000)>>16)($6)	; 	;		    sll	    $6, 24              , $6;
	lda	$6, 0x0C0($6)
		
	lda		$2, 8($31)		 
	bis		$31, $31, $3	 
read_more_bits:
	sll	$3, 1, $3		 
	lda	$4, (2)($31)		 
	hw_stl/p	$4, 0($6)		 
	mb						 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	lda	$4, (2|1)($31)	 
	hw_stl/p	$4, 0($6)		 
	mb				 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	hw_ldl/p	$4,  0($6)		 
	srl	$4, 3, $4		 
	bis	$4, $3, $3		 
	mb				 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	lda	$4, (2)($31)		 
	hw_stl/p	$4, 0($6)		 
	mb						 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	subl	$2, 1, $2		 
	bne	$2, read_more_bits			 

	hw_stl/p	$31, 0($6)		 
        mb                                               
        	lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;                     
        lda     $4, (1)($31)        
        hw_stl/p   $4, 0($6)               
        mb                               
        	lda $16, ( 100&0xffff)( $31)		;  ldah $16, (( 100+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;                     
	hw_stl/p	$31, 0($6)		 
        mb                                               
        	lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;                     

	bne	$31, 1f			 
1:	bis	$29, 1, $29		 
	hw_rets/jmp	($29)		

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
srom_iic_read_last_byte:
	    lda $6, (  0x801A0&0xffff)( $31)		;  ldah $6, ((  0x801A0+0x8000)>>16)($6)	; 	;		    sll	    $6, 24              , $6;
	lda	$6, 0x0C0($6)
		
	lda		$2, 8($31)		 
	bis		$31, $31, $3	 
last_read_more_bits:
	sll	$3, 1, $3		 
	lda	$4, (2)($31)		 
	hw_stl/p	$4, 0($6)		 
	mb						 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	lda	$4, (2|1)($31)	 
	hw_stl/p	$4, 0($6)		 
	mb				 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	hw_ldl/p	$4,  0($6)		 
	srl	$4, 3, $4		 
	bis	$4, $3, $3		 
	mb				 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	lda	$4, (2)($31)		 
	hw_stl/p	$4, 0($6)		 
	mb						 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	subl	$2, 1, $2		 
	bne	$2, last_read_more_bits			 
 
	lda	$4, (2)($31)	 
	hw_stl/p	$4, 0($6)		 
        mb                                               
        	lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;                     
        lda     $4, (2 | 1)($31)        
        hw_stl/p   $4, 0($6)               
        mb                               
        	lda $16, ( 100&0xffff)( $31)		;  ldah $16, (( 100+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;                     
	lda	$4, (2)($31)		 
	hw_stl/p	$4, 0($6)		 
        mb                                               
        	lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;                     

	bne	$31, 1f			 
1:	bis	$29, 1, $29		 
	hw_rets/jmp	($29)		

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
srom_iic_write_byte:
	    lda $6, (  0x801A0&0xffff)( $31)		;  ldah $6, ((  0x801A0+0x8000)>>16)($6)	; 	;		    sll	    $6, 24              , $6;
	lda	$6, 0x0C0($6)
		
					 
	bis		$31, 8, $2	 
write_more_bits:
	srl	$3, 6, $4		 
	and	$4, 2, $4		 
	hw_stl/p	$4, 0($6)		 
	mb						 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	bis	$4, 1, $4		 
	hw_stl/p	$4, 0($6)		 
	mb						 
		lda $16, ( 100&0xffff)( $31)		;  ldah $16, (( 100+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	and	$4, 2, $4		 
	hw_stl/p	$4, 0($6)		 
	mb						 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	sll	$3, 1, $3		 
	subl	$2, 1, $2		 
	bne	$2, write_more_bits

	bis	$31, 2, $4		 
	hw_stl/p	$4, 0($6)		 
	mb						 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	bis	$4, 1, $4		 
	hw_stl/p	$4, 0($6)		 
	mb						 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	hw_ldl/p	$3,  0($6)		 
	mb				 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	hw_stl/p	$31, 0($6)		 
	mb						 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	srl	$3, 3, $3		 
	bne	$31, 1f			 
1:	bis	$29, 1, $29		 
	hw_rets/jmp	($29)		
		

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
srom_iic_start:
	    lda $6, (  0x801A0&0xffff)( $31)		;  ldah $6, ((  0x801A0+0x8000)>>16)($6)	; 	;		    sll	    $6, 24              , $6;
	lda	$6, 0x0C0($6)
		
	lda	$4, (2|1)($31)	 
	hw_stl/p	$4, 0($6)			 
	mb				 
		lda $16, ( 350&0xffff)( $31)		;  ldah $16, (( 350+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	lda	$4, (1)($31)	 
	hw_stl/p	$4, 0($6)		 
	mb				 
		lda $16, ( 100&0xffff)( $31)		;  ldah $16, (( 100+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	hw_stl/p	$31, 0($6)		 
	mb				 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	bne	$31, 1f			 
1:	bis	$29, 1, $29		 
	hw_rets/jmp	($29)		
	

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
srom_iic_stop:

	    lda $6, (  0x801A0&0xffff)( $31)		;  ldah $6, ((  0x801A0+0x8000)>>16)($6)	; 	;		    sll	    $6, 24              , $6;
	lda	$6, 0x0C0($6)
		
	hw_stl/p	$31, 0($6)			 
		lda $16, ( 50&0xffff)( $31)		;  ldah $16, (( 50+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;				 
	lda	$4, (1)($31)	 
	hw_stl/p	$4, 0($6)		 
	mb				 
		lda $16, ( 100&0xffff)( $31)		;  ldah $16, (( 100+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	hw_stl/p	$31, 0($6)			 
		lda $16, ( 100&0xffff)( $31)		;  ldah $16, (( 100+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;				 
	lda	$4, (1)($31)	 
	hw_stl/p	$4, 0($6)		 
	mb				 
		lda $16, ( 150&0xffff)( $31)		;  ldah $16, (( 150+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	lda	$4, (2|1)($31)	 
	hw_stl/p	$4, 0($6)		 
	mb				 
		lda $16, ( 150&0xffff)( $31)		;  ldah $16, (( 150+0x8000)>>16)($16)	; 	; 	bsr		$27, usdelay	;			 
	bne	$31, 1f			 
1:	bis	$29, 1, $29		 
	hw_rets/jmp	($29)		

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
srom_iic_read_rom:
	bsr	$29, srom_iic_start		 
	and	$5, 0xe, $3		 
	bis	$3, 0xa0, $3		 
	bsr	$29, srom_iic_write_byte	 
	bis	$31, $3, $8

	zap	$7, 0xfe, $3		 
	bsr	$29, srom_iic_write_byte	 
	bis	$3, $8, $8

	bsr	$29, srom_iic_start		 

	and	$5, 0xe, $3		 
	bis	$3, 0xa1, $3		 
	bsr	$29, srom_iic_write_byte	 
	bis	$3, $8, $8

	bne	$8, srom_iic_read_rom_err        
	bsr	$29, srom_iic_read_byte	 


	bne	$31, 1f			 
1:	bis	$9, 1, $9		 
	hw_rets/jmp	($9)		

 
srom_iic_read_rom_err:
	 
	 
	bsr	$29, srom_iic_stop		 
	lda	$3, 0x7fff($31)		 
	bne	$31, 1f			 
1:	bis	$9, 1, $9		 
	hw_rets/jmp	($9)		 
 

srom_iic_configure:
        lda     $7, 2($31)              	 
        bsr     $9, srom_iic_read_rom  	 
	cmpeq	$3, 0x04, $2			 
	beq	$2,  return_error		 
	bsr	$29, srom_iic_read_byte		 
	cmplt	$3, 0x0b, $2			 
	bne	$2,  return_error                
	subq	$3, 0xb, $8			 
	cmplt	$8, 0x4, $2			 
	beq	$2, return_error                
	bsr     $29, srom_iic_read_byte          
	addq	$8, $3, $9			 
	bsr     $29, srom_iic_read_byte          
	addq	$9, $3, $9			 
	and	$3, 2, $3			 
	s4addl	$3, $8, $8			 
	bsr     $29, srom_iic_read_byte          
	bsr     $29, srom_iic_read_byte          
        bne     $3,  return_error                
	bsr     $29, srom_iic_read_byte          
        cmpeq   $3, 0x01, $2                     
        beq     $2,  return_error                
	bsr     $29, srom_iic_read_byte          
	bsr     $29, srom_iic_read_byte          
	bsr     $29, srom_iic_read_byte          
	bsr     $29, srom_iic_read_byte          
	bsr     $29, srom_iic_read_byte          
	bsr     $29, srom_iic_read_byte          
	bsr     $29, srom_iic_read_byte          
	bsr     $29, srom_iic_read_byte          
	bsr     $29, srom_iic_read_byte          
	and	$3, 4, $3			 
	addq	$3, $8, $8			 
	srl	$3, 2, $3			 
	addq	$9, $3, $9			 
        bsr     $29, srom_iic_read_last_byte     
        bsr     $29, srom_iic_stop               
	subq	$9, 7, $2			 
	sll	$8, 4, $8			 
	bis	$2, $8, $2			 
	bne	$31, 1f			 
1:	bis	$28, 1, $28		 
	hw_rets/jmp	($28)		


return_error:
	bsr	$29, srom_iic_read_last_byte	 
	bsr	$29, srom_iic_stop		 
	bis	$31, $31, $2			 
	bis	$31, $31, $8			 
	bne	$31, 1f			 
1:	bis	$28, 1, $28		 
	hw_rets/jmp	($28)		

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

usdelay:						 
srom_usdelay:
	bis	$31, $31, $31
	 
	 
	 
	lda		$20, 6667($31)		 
	mulq	$20, $16, $20			 
	bis	$31, $31, $31
usdelay_init:
	rpcc	$16					 
	bis	$31, $31, $31
	addq	$20, $16, $20
	zapnot	$20, 0x0f, $20		 
usdelay_loop:				 
	rpcc	$16			 
	zapnot	$16, 0x0f, $16		 
	cmplt	$20, $16, $16		 
	beq	$16, usdelay_loop	 
	bne	$31, 1f			 
1:	bis	$27, 1, $27		 
	hw_rets/jmp	($27)		



 
srom_iic_wait_for_idle:
        lda     $3, 0x1000($31)
iic_wait_for_loop:				 
        ldbu    $5, 1($0)			 
        ldbu    $2, 0($1)			 
        subq    $3, 1, $3                        
        beq     $3, iic_idle                     
        blbc    $5, iic_wait_for_loop		 
iic_idle:                                        
	mb					 
	bne	$31, 1f			 
1:        bis     $27, 1, $27                    
        hw_rets/jmp ($27)                   



 
iic_wait_for_pin:				 

	ldah    $3, 0x7($31)
iic_wait_for_pin_loop:
	ldbu    $4, 1($0)
	ldbu    $2, 0($1)
	subq    $3, 1, $3
	beq     $3, iic_pin
	srl     $4, 7, $2
	blbs    $2, iic_wait_for_pin_loop
iic_pin: 
	mb					 
	bne	$31, 1f			 
1:        bis     $27, 1, $27                      
        hw_rets/jmp ($27)                   

iic_set_addresses:
	ldah    $0, 0x4008($31)
	lda     $0, 0xffc0($0)
	sll     $0, 13, $0
	lda	$4, 0x8000($31)		
	sll	$4, 32, $4		
	ldah    $1, 0x4010($31)
	lda     $1, 0xe000($1)
	sll     $1, 13, $1
	lda     $1, 0x80($1)
	addq	$0, $4, $0
	addq	$1, $4, $1
	mb					 
	bne	$31, 1f			 
1:        bis     $27, 1, $27                      
        hw_rets/jmp ($27)                   


 
 
 

srom_write_word:
iic_write_word:
	bsr	$27, srom_iic_wait_for_idle
	and     $16, 0xfe, $16
	mb					 
	stb     $16, 0($0)
        ldbu    $2, 0($1)
	bis     $31, 0xc5, $16
	bis	$31, $31, $31
	bis	$31, $31, $31
	bis	$31, $31, $31
	mb
        bis     $31, $31, $31
        bis     $31, $31, $31
        bis     $31, $31, $31

	stb     $16, 1($0)
        ldbu    $2, 0($1)
        bsr     $27, iic_wait_for_pin
	mb
	stb     $17, 0($0)
        ldbu    $2, 0($1)
        bsr     $27, iic_wait_for_pin
        bis     $31, 0xc3, $16
	mb
	stb     $16, 1($0)
        ldbu    $2, 0($1)
	mb					 
	bne	$31, 1f			 
1:        bis     $28, 1, $28                      
        hw_rets/jmp ($28)                   

 
 
 
srom_access_lcd:
	bis     $31, $17, $6
	bsr	$27, iic_set_addresses
	bis     $31, $16, $17
	bis	$31, 0x42, $16
	bsr	$28, srom_write_word
	bis	$31, 0x4, $16
	bsr	$27, usdelay
	bis     $6, 0x60, $17
	bis	$31, 0x40, $16
	bsr	$28, srom_write_word
	bis	$31, 0x4, $16
	bsr	$27, usdelay
	bis     $6, 0x40, $17
	bis	$31, 0x40, $16
	bsr	$28, srom_write_word
	bis	$31, 0x4, $16
	bsr	$27, usdelay
	bis     $31, $16, $17
	bis     $6, 0x60, $17
	bis	$31, 0x40, $16
	bsr	$28, srom_write_word
	bis	$31, 0x4, $16
	bsr	$27, usdelay
	mb					 
	bne	$31, 1f			 
1:        bis     $26, 1, $26                      
        hw_rets/jmp ($26)                   

 
srom_init_lcd:
	ldah	$0, 0x4010($31)
	lda     $0, 0xf000($0)
	sll     $0, 13, $0
	lda	$4, 0x8000($31)		
	sll	$4, 32, $4		
	addq	$0, $4, $0
	lda	$0, 0x2800($0)
	bis	$31, 0xf, $1
	mb					 
	stb	$1, 0x04($0)
	mb
	bis	$31, 0x80, $1
	stb	$1, 0x40($0)
	mb
	bis	$31, 0x80, $1
	stb	$1, 0x41($0)
	mb
	bis	$31, 0x80, $1
	stb	$1, 0x42($0)
	mb
	bis	$31, 0x80, $1
	stb	$1, 0x43($0)
	mb
	bis	$31, 0x27, $1
	stb	$1, 0x44($0)
	mb
	bis	$31, 0xe0, $1
	stb	$1, 0x45($0)
	mb
	bis	$31, 0xe0, $1
	stb	$1, 0x47($0)
	mb
	bis	$31, 0xf0, $1
	stb	$1, 0x48($0)
	mb
	bis	$31, 0x40, $1
	stb	$1, 0x49($0)
	mb
	bis	$31, 0x80, $1
	stb	$1, 0x4B($0)
	mb
	bis	$31, 0x80, $1
	stb	$1, 0x4C($0)
	mb
	bis	$31, 0x70, $1
	stb	$1, 0x4D($0)
	mb

	bsr	$27, iic_set_addresses
	bsr	$27, srom_iic_wait_for_idle

	bis     $31, 0x80, $16
	mb					 
	stb     $16, 1($0)
        ldbu    $2, 0($1)
	bis	$31, 0x40, $16
	bsr	$27, usdelay

	bis     $31, 0x0, $16
	mb					 
	stb     $16, 1($0)
        ldbu    $2, 0($1)
	bis	$31, 0x40, $16
	bsr	$27, usdelay

	bis     $31, 0x5b, $16
	mb					 
	stb     $16, 0($0)
        ldbu    $2, 0($1)
	bis     $31, 0x20, $16
	bis	$31, $31, $31
	bis	$31, $31, $31
	bis	$31, $31, $31
	mb
        bis     $31, $31, $31
        bis     $31, $31, $31
        bis     $31, $31, $31
	stb     $16, 1($0)
        ldbu    $2, 0($1)
        bsr     $27, iic_wait_for_pin


	bis     $31, 0x14, $16
	mb					 
	stb     $16, 0($0)
        ldbu    $2, 0($1)
	bis     $31, 0xc3, $16
	bis	$31, $31, $31
	bis	$31, $31, $31
	bis	$31, $31, $31
	mb
        bis     $31, $31, $31
        bis     $31, $31, $31
        bis     $31, $31, $31

	stb     $16, 1($0)
        ldbu    $2, 0($1)
	bis	$31, 0x4, $16
	bsr	$27, usdelay


	bis     $31, 0x38, $16
	bis     $31, $31, $17
	bsr	$26, srom_access_lcd
	bis     $31, 0x38, $16
	bis     $31, $31, $17
	bsr	$26, srom_access_lcd
	bis     $31, 0x38, $16
	bis     $31, $31, $17
	bsr	$26, srom_access_lcd
	bis     $31, 0x38, $16
	bis     $31, $31, $17
	bsr	$26, srom_access_lcd
	bis     $31, 0x0e, $16
	bis     $31, $31, $17
	bsr	$26, srom_access_lcd
	bis     $31, 0x02, $16
	bis     $31, $31, $17
	bsr	$26, srom_access_lcd
	bis     $31, 0x01, $16
	bis     $31, $31, $17
	bsr	$26, srom_access_lcd

	bis     $31, 0x80, $16
	bis     $31, $31, $17
	bsr	$26, srom_access_lcd

	mb					 
	bne	$31, 1f			 
1:        bis     $7, 1, $7                      
        hw_rets/jmp ($7)                   
























WriteCY_CMD_REG:
	lda	$1, 0x04($31) 
	br	$31, WriteConf

WriteCY_INTA_ROUTE:
	lda	$1, 0x40($31) 
	br	$31, WriteConf

WriteCY_INTB_ROUTE:
	lda	$1, 0x41($31) 
	br	$31, WriteConf

WriteCY_INTC_ROUTE:
	lda	$1, 0x42($31) 
	br	$31, WriteConf

WriteCY_INTD_ROUTE:
	lda	$1, 0x43($31) 
	br	$31, WriteConf

WriteCY_CTRL_REG:
	lda	$1, 0x44($31) 
	br	$31, WriteConf

WriteCY_ERR_CTRL_REG:
	lda	$1, 0x45($31) 
	br	$31, WriteConf

WriteCY_TOP_OF_MEM:
	lda	$1, 0x48($31) 
	br	$31, WriteConf

WriteCY_ATCTRL_REG1:
	lda	$1, 0x49($31) 
	br	$31, WriteConf

WriteCY_IDE0_ROUTE:
	lda	$1, 0x4B($31) 
	br	$31, WriteConf

WriteCY_IDE1_ROUTE:
	lda	$1, 0x4C($31) 
	br	$31, WriteConf

WriteCY_SA_USB_CTRL:
	lda	$1, 0x4D($31) 
	br	$31, WriteConf

WriteConf:
	bis	$16, $31, $2
	lda $3, ( 0x801FE&0xffff)( $31)		;  ldah $3, (( 0x801FE+0x8000)>>16)($3)	; 
	sll	$3, 24, $3
	lda	$4, 0x8000($31)
	sll	$4, 32, $4
	bis	$3, $4, $3
	lda	$16, (5<<11)($31)	
	bis	$3, $16, $3		
	br	$31, WriteData

WriteLEDS:
	cmpeq	$2, 0x20, $1		
	bne	$1, skipSromPort	

	bis	$29, $29, $1		
		lda	$29, 3($31);		lda	$28, 0x2e($31);				bsr	$0, minidebugger ;
		lda	$29, 7($31);		bis	$31, $2, $28;				bsr	$0, minidebugger ;
	bis	$1, $1, $29		
skipSromPort:
	lda	$1, 0x80($31)	
	br	$31, WriteCont

WriteSMC_Config1:
WriteSMC_Index1:
	lda	$1, 0x370($31) 
	br	$31, WriteCont_std	
WriteSMC_Data1:
	lda	$1, 0x371($31)	
	br	$31, WriteCont_std

WriteRTCAddr:
	lda	$1, 0x70($31) 
	br	$31, WriteCont_std
WriteRTCData:
	lda	$1, 0x71($31)	
	br	$31, WriteCont_std
WriteSIO_NMISC:
	lda	$1, 0x61($31)	
	br	$31, WriteCont_std
WriteSIO_TMR2:
	lda	$1, 0x42($31) 
	br	$31, WriteCont_std
WriteSIO_TCW:
	lda	$1, 0x43($31)	

WriteCont_std:
	bis	$16, $16, $2		
WriteCont:
	lda	$3, 0x8000($31)
	sll	$3, (32-24), $3
	lda $3, ( 0x801FC&0xffff)( $3)		;  ldah $3, (( 0x801FC+0x8000)>>16)($3)	; 
	sll	$3, 24, $3

WriteData:
	bis	$1, $3, $1		
	mb
	stb	$2, 0x00($1)		
	mb				
	bne	$31, 1f			 
1:	bis	$29, 1, $29		 
	hw_rets/jmp	($29)		
























ReadRTCData:
	lda	$2, 0x71($31)	
	lda	$3, 0x8000($31)
	sll	$3, (32-24), $3
	lda $3, ( 0x801FC&0xffff)( $3)		;  ldah $3, (( 0x801FC+0x8000)>>16)($3)	; 
	sll	$3, 24, $3

ReadData:
	bis	$2, $3, $2		
	ldbu	$0, 0x00($2)		
	bne	$31, 1f			 
1:	bis	$29, 1, $29		 
	hw_rets/jmp	($29)		




















ReadConfJumper:







	bis	$31, $31, $0

	bne	$31, 1f			 
1:	bis	$29, 1, $29		 
	hw_rets/jmp	($29)		






































intdivide:
	bis	$31, $31, $0	
	cmplt	$17, $16, $1	
	bne	$1, divide_done	
divide:
	lda	$1, 1($31)	
divide1:
	addq	$0, $1, $4	
	mulq	$4, $16, $2	
	sll	$1, 1, $1	
	cmplt	$2, $17, $3	
	bne	$3, divide1	
	srl	$1, 2, $1	
	addq	$0, $1, $0	
	cmplt	$1, 2, $3	
	beq	$3, divide	
divide_done:
	bne	$31, 1f			 
1:	bis	$27, 1, $27		 
	hw_rets/jmp	($27)		














updivide:
	bsr	$27, intdivide	
	mulq	$16, $0, $1	
	cmplt	$1, $17, $2	
	blbc	$2, updivide_done
	addq	$0, 1, $0	
updivide_done:
	bne	$31, 1f			 
1:	bis	$26, 1, $26		 
	hw_rets/jmp	($26)		
















nintdivide:
	bsr	$27, intdivide	
	mulq	$16, $0, $1	
	cmplt	$1, $17, $2	
	blbc	$2, nintdivide_done
	addq	$0, 1, $0	
	mulq	$16, $0, $2	
	subq	$2, $17, $2
	subq	$17, $1, $3
	cmplt	$3, $2, $1	
	blbc	$1, nintdivide_done
	subq	$0, 1, $0	
nintdivide_done:
	bne	$31, 1f			 
1:	bis	$26, 1, $26		 
	hw_rets/jmp	($26)		





















srom_wrtest:





















	hw_stq/p	$17, 0($16)		
	mb				

srom_rdtest:
	hw_ldq/p	$18, 0($16)		






















	xor	$18, $17, $19		

























equal:
	bne	$31, 1f			 
1:	bis	$26, 1, $26		 
	hw_rets/jmp	($26)		



























FatalError:
		bis	$31, 0x3F, $2	; 		bsr	$29, WriteLEDS	; 			
	lda	$17, 500($31)		
	bsr	$27, wait_for_pif
		bis	$31, $8, $2	; 		bsr	$29, WriteLEDS	; 				
	bis	$8, $8, $19
	bsr	$28, Beep		
	lda	$17, 1000($31)		
	bsr	$27, wait_for_pif



	bis	$31, 0x80, $16
	bis	$31, 0, $17
        bsr     $26, srom_access_lcd
	mb

	bis	$31, 0xc0, $16
	bis	$31, 0, $17
        bsr     $26, srom_access_lcd
	mb

	bis	$31, 0x45, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x72, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x72, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x6f, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x72, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb
	bis	$31, 0x20, $16
	bis	$31, 1, $17
        bsr     $26, srom_access_lcd
	mb

	srl	$8, 4, $16
	and	$16, 0xf, $16
	addq	$16, 0x30, $16
	bis     $31, 1, $17
        bsr     $26, srom_access_lcd
        mb


	and	$8, 0xf, $16
	addq	$16, 0x30, $16
	bis     $31, 1, $17
        bsr     $26, srom_access_lcd
        mb









	lda	$17, 1000($31)		
	bsr	$27, wait_for_pif

	srl	$30, (3+16)	, $1	

		lda	$29, 0($31);		bsr	$0, minidebugger ;		
reset_FatalError:
	br	$31, reset_FatalError























Beep:
	lda	$16, 3($31)		
	bsr	$29, WriteSIO_NMISC
	lda	$16, 0xB6($31)		
	bsr	$29, WriteSIO_TCW	
	lda	$16, 0xE2($31)		
					
	bsr	$29, WriteSIO_TMR2	
	lda	$16, 3($31)		
	bsr	$29, WriteSIO_TMR2

	lda	$17, 100($31)		
	bsr	$27, wait_for_pif	

	lda	$16, 0xB2($31)		
	bsr	$29, WriteSIO_TCW
	lda	$16, 0($31)
	bsr	$29, WriteSIO_TMR2	
	bsr	$29, WriteSIO_TMR2	
	bsr	$29, WriteSIO_NMISC	

	lda	$17, 100($31)		
	bsr	$27, wait_for_pif	
	subq	$19, 1, $19		
	bne	$19, Beep		
	bne	$31, 1f			 
1:	bis	$28, 1, $28		 
	hw_rets/jmp	($28)		





























GetCPUSpeed:













wait_for_not_uip:
	lda	$16, 0xA	($31)	
	bsr	$29, WriteRTCAddr
	lda	$16, ((2 << 4	) | (7 << 0	))($31)
	bsr	$29, WriteRTCData	






	lda	$16, 0xB	($31)	
	bsr	$29, WriteRTCAddr
	lda	$16, ((1 << 6	) | (1 << 2	) | (1 << 1	))($31)
	bsr	$29, WriteRTCData	

        lda     $16, 0xA	($31)     
        bsr     $29, WriteRTCAddr
        bsr     $29, ReadRTCData        
        srl     $0, 7	, $0     
        blbs    $0, wait_for_not_uip    






	lda	$17, 10($31)		
	bsr	$27, wait_for_pif	






	lda	$17, 64($31)		
	rpcc	$4			
	bsr	$27, wait_for_pif
	rpcc	$0			

	subl	$0, $4, $0		
	bge 	$0, noshft		
	bis	$31, 1, $1		
	sll	$1, 32, $1		
	addq	$1, $0, $0		

noshft:
	
	sll	$0, 3, $0		

	bne	$31, 1f			 
1:	bis	$28, 1, $28		 
	hw_rets/jmp	($28)		





















wait_for_pif:
	lda	$5, 10($31)		 
wait_for_pif0:
	subq	$5, 1, $5
	beq	$5, wait_assert
	lda	$16, 0xC	($31)
	bsr	$29, WriteRTCAddr
	bsr	$29, ReadRTCData	
	srl	$0, 6, $0	
	blbs	$0, wait_for_pif0	

wait_assert:
        lda    $5, 10($31)               
wait_assert0:
        subq    $5, 1, $5
        beq     $5, wait_assert_to
	bsr	$29, WriteRTCAddr
	bsr	$29, ReadRTCData	
	srl	$0, 6, $0	
	blbc	$0, wait_assert		
wait_assert_to:
	subq	$17, 1, $17		
	bne	$17, wait_for_pif
	bne	$31, 1f			 
1:	bis	$27, 1, $27		 
	hw_rets/jmp	($27)		






































































































































































































































































LoadSystemCode:
					
	lda	$10, ((1 << 8) | 4)($31) 
	lda	$1, ((2 << 8) | 4)($31) 
	srl	$16, (0+16)	, $0	
	cmovlbc	$0, $1, $10		

scanROM:
		lda	$29, 3($31);		lda	$28, 0x23($31);				bsr	$0, minidebugger ;
	srl	$10, 32, $6
		lda	$29, 2($31);		bis	$31, $6, $28;				bsr	$0, minidebugger ;
		lda	$29, 2($31);		bis	$31, $10, $28;				bsr	$0, minidebugger ;
		lda	$29, 3($31);		lda	$28, 0x23($31);				bsr	$0, minidebugger ;
	bis	$31, $31, $12		
	bis	$31, $31, $6		

rescanROM:
	bis	$6, $6, $17		
	bis	$31, $31, $7		
	bic	$10, 1, $10		

	lda $0, ( 0x200000                &0xffff)( $31)		;  ldah $0, (( 0x200000                +0x8000)>>16)($0)	; 		
	cmpult	$17, $0, $0		
	blbs	$0, ValidationPattern







DoneWithROM:
	






	and	$10, 4, $0		
	beq	$0, NoHeader		

	




	and	$10, 8, $0
	lda	$10, ((1 << 8) | 8) ($31)
	bne	$0, scanROM		
	bis	$10, 4, $10		
	br	$31, scanROM		

ValidationPattern:
	bsr	$28, read_flash		
					
	bis	$17, $17, $6		
	lda $1, ( 0x5a5ac3c3&0xffff)( $31)		;  ldah $1, (( 0x5a5ac3c3+0x8000)>>16)($1)	; 	
	cmpeq	$0, $1, $1		
	bne	$1, InversePattern	
	lda $1, ( 0xc3e0&0xffff)( $31)		;  ldah $1, (( 0xc3e0+0x8000)>>16)($1)	; 		
	extwl	$0, 2, $0		
	cmpeq	$0, $1, $0		
	beq	$0, rescanROM		

InversePattern:
	bsr	$28, read_flash		
					
	lda $1, ( 0xa5a53c3c&0xffff)( $31)		;  ldah $1, (( 0xa5a53c3c+0x8000)>>16)($1)	; 	
	zap	$1, 0xF0, $1		
	cmpeq	$0, $1, $0		
	beq	$0, rescanROM		

HeaderSize:
	bsr	$28, read_flash		
					
	cmplt	$0, 0x34, $1		
	bis	$10, $1, $10
	blbs	$10, HeaderIsValid	

	subq	$0, 0x10, $5		
	srl	$5, 2, $5		

HeaderCheckSum:
	bsr	$28, read_flash		
	subq	$5, 1, $5		
	bne	$5, HeaderCheckSum	

	bis	$7, $7, $5		
	bsr	$28, read_flash		
	addq	$6, (0xC-0x4), $17	

	srl	$10, 2, $1		
	blbc	$1, HeaderIsValid	
	cmpeq	$0, $5, $0		
	beq	$0, rescanROM		

HeaderIsValid:
	addq	$12, 1, $12		

	bsr	$28, read_flash		
	bis	$0, $0, $11		
	bsr	$28, read_flash		
	bis	$0, $0, $9		
	bsr	$28, read_flash		
	bis	$0, $0, $5		
	bsr	$28, read_flash		
	bis	$0, $0, $8		
	bsr	$28, read_flash		
	sll	$0, 32, $0		
	bis	$8, $0, $8		

	blbs	$10, SkipFirmwareID	
FirmwareID:				
	addq	$6, (0x20-0x4), $17	
	bsr	$28, read_flash		
	extbl	$0, 1, $1		

SROMImageCheck:
	subq	$12, 1, $12		
	cmpeq	$1, 10, $0		
	bne	$0, rescanROM		
	addq	$12, 1, $12		

SkipFirmwareID:
	srl	$10, 1, $2
	cmovlbc $2, $12, $1		
	blbc	$2, PositionDependent	

					
	blbs	$10, rescanROM		

PositionDependent:
	extbl	$10, 1, $0		
	cmpeq	$1, $0, $0		
	beq	$0, rescanROM		

	addq	$6, (0x24-0x4), $17	
	bsr	$28, read_flash		
	cmovlbc $10, $0, $9		

	addq	$6, (0x8-0x4), $17	
	bsr	$28, read_flash
	subq	$6, 0x4, $17		
	addq	$0, $17, $17		
	addq	$17, $9, $9		
	br	$31, headerEnd

NoHeader:
	lda	$19, 0x4     ($31)
	bsr	$28, Beep		




	lda $8, ( 0x200000&0xffff)( $13)		;  ldah $8, (( 0x200000+0x8000)>>16)($8)	; 		

	bis	$31, $31, $5		



	lda $17, ( 0x20000&0xffff)( $31)		;  ldah $17, (( 0x20000+0x8000)>>16)($17)	; 		

	lda $9, ( 0x200000                &0xffff)( $31)		;  ldah $9, (( 0x200000                +0x8000)>>16)($9)	; 		
	bic	$10, 4, $10		

headerEnd:
	bis	$8, $8, $25		
	bis	$31, $31, $7		
	blbs	$5, LoadComp		















		bis	$31, 0x15, $2	; 		bsr	$29, WriteLEDS	; 			
LoadUncomp:
	bsr	$28, read_flash		
					
	hw_stl/p	$0, 0($8)		

	addq	$8, 4, $8		
	cmpult	$17, $9, $0		
	bne	$0, LoadUncomp		
					
					
	br	$31, ImageCheckSums	

LoadComp:
		bis	$31, 0x16, $2	; 		bsr	$29, WriteLEDS	; 			
	bis	$31, 4, $18		
 	bsr	$26, getRecord		

LoadCInit:
	bis	$31, $31, $27		
	bis	$31, $31, $5		

LoadCLoop:
	bsr	$26, getByte
	insbl	$16, $5, $0		
	bis	$0, $27, $27		
	addq	$5, 1, $5		
	cmpeq	$5, 4, $0		
	beq	$0, LoadCLoop		

	hw_stl/p	$27, 0($8)		
	addq	$8, 4, $8		
	bne	$19, LoadCInit		

DecompressionDone:
	lda	$5, 1($31)		

ImageCheckSums:
	blbs	$10, codeLoaded		
	srl	$10, 2, $0		
	blbc	$0, codeLoaded		
	cmpeq	$7, $11, $1		
	beq	$1, SumMismatch		
					
					
	blbs	$5, codeLoaded		

	ldah	$0, 0x100($31)		
flush:
	hw_ldq/p	$31, 0x0($0)		
	subq	$0, 0x20, $0		
	bge	$0, flush		

	bis	$31, $31, $7		
	bis	$25, $25, $17		
secondcheck:
	hw_ldl/p	$0, 0x0($17)		
	bsr	$28, ComputeCheckSum	
	addq	$17, 4, $17		
	cmpult	$17, $8, $1		
	bne	$1, secondcheck
	cmpeq	$7, $11, $1		
	bne	$1, codeLoaded		
NoMemory:
	lda	$8, 0x06	($31)
	br	$31, FatalError		

SumMismatch:
	subq	$12, 1, $12		
	br	$31, rescanROM		
codeLoaded:
	bne	$31, 1f			 
1:	bis	$14, 1, $14		 
	hw_rets/jmp	($14)		





























read_flash:
	ldah	$0, (0x200000                >>16)($31)	
	cmpult	$17, $0, $0		
	cmoveq	$0, $17, $6
	beq	$0, rescanROM		

	    lda $0, (  0x80100&0xffff)( $31)		;  ldah $0, ((  0x80100+0x8000)>>16)($0)	; 	;		    sll	    $0, 24              , $0;
	sll	$17, 6, $4
	bis	$4, $0, $4
	hw_ldq/p	$2, 0x00($4)
	zap	$2, 0xfe, $2

	hw_ldq/p	$3, 0x40($4)
	insbl	$3, 1, $3
	bis	$3, $2, $2

	hw_ldq/p	$3, 0x80($4)
	insbl	$3, 2, $3
	bis	$3, $2, $2

	hw_ldq/p	$3, 0xC0($4)
	insbl	$3, 3, $3
	bis	$3, $2, $2

	zap	$2, 0xF0, $0		
	addq	$17, 4, $17		
					

























ComputeCheckSum:
	lda	$2, 0($31)		
CheckSumLoop:
	srl	$7, 1, $3		
	lda $4, ( 0x8000&0xffff)( $31)		;  ldah $4, (( 0x8000+0x8000)>>16)($4)	; 
	addq	$3, $4, $4		
	cmovlbs $7, $4, $3
	extbl	$0, $2, $4		
	addq	$3, $4, $7		
	zapnot	$7, 0x03, $7		
	addq	$2, 1, $2		
	cmpeq	$2, 4, $4		
	beq	$4, CheckSumLoop
	bne	$31, 1f			 
1:	bis	$28, 1, $28		 
	hw_rets/jmp	($28)		






































getByte:
	blt	$19, repByte		
	bsr	$28, ReadFByte		
	bis	$2, $2, $16		
	lda	$19, -1($19)		
	beq	$19, getRecord		
	bis	$26, 1, $26		 
	hw_rets/jmp	($26)		

repByte:
	bis	$2, $2, $16
	lda	$19, 1($19)		
	beq	$19, getRecord		
	bis	$26, 1, $26		 
	hw_rets/jmp	($26)		

getRecord:
	bsr	$28, ReadFByte		
	sll	$2, 56, $19		
	sra	$19, 56, $19		
	bge	$19, norepeat		
	bsr	$28, ReadFByte		

norepeat:
	bis	$26, 1, $26		 
	hw_rets/jmp	($26)		








































ReadFByte:
	cmpeq	$18, 4, $0		
	beq	$0, skipRd		

	cmpult	$17, $9, $0		
	beq	$0, DecompressionDone	

	bis	$31, $31, $18		
					
	bis	$28, $28, $15		
	bsr	$28, read_flash		
	bis	$15, $15, $28		
					
	bis	$0, $0, $15		
skipRd:
	extbl	$15, $18, $2		
	lda	$18, 1($18)		
	bis	$28, 1, $28		 
	hw_rets/jmp	($28)		




.align 6
minidebugger:				
.end
